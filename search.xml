<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ubuntu22编译安装php7</title>
      <link href="/posts/33744e0d.html"/>
      <url>/posts/33744e0d.html</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu22-编译安装php74"><a href="#ubuntu22-编译安装php74" class="headerlink" title="ubuntu22 编译安装php74"></a>ubuntu22 编译安装php74</h1><h3 id="ub22-with-openssl-1-1-1u"><a href="#ub22-with-openssl-1-1-1u" class="headerlink" title="ub22 with openssl 1.1.1u"></a>ub22 with openssl 1.1.1u</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./Configure --prefix=&#123;&#123; openssl_install_dir &#125;&#125; --openssldir=&#123;&#123; openssl_install_dir &#125;&#125; -fPIC -shared linux-x86_64</span><br><span class="line">make -j8 &amp;&amp; make install</span><br><span class="line">echo /usr/local/openssl/lib &gt; /etc/ld.so.conf.d/openssl.conf</span><br></pre></td></tr></table></figure><h3 id="curl-7-88-1"><a href="#curl-7-88-1" class="headerlink" title="curl 7.88.1"></a>curl 7.88.1</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/curl --with-openssl-dir=/usr/local/openssl</span><br><span class="line">make -j 8 &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="install-icu-70-x"><a href="#install-icu-70-x" class="headerlink" title="install icu 70.x"></a>install icu 70.x</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make -j 8 &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="install-php"><a href="#install-php" class="headerlink" title="install php"></a>install php</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">export OPENSSL_CONF=/usr/lib/ssl/openssl.cnf</span><br><span class="line">export PKG_CONFIG_PATH=/usr/local/openssl/lib/pkgconfig:/usr/local/curl/lib/pkgconfig</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/openssl/lib:/usr/local/curl/lib</span><br><span class="line"></span><br><span class="line">&#x27;./configure&#x27; \</span><br><span class="line">&#x27;--prefix=/usr/local/php/74&#x27; \</span><br><span class="line">&#x27;--with-config-file-path=/usr/local/php/74/etc&#x27; \</span><br><span class="line">&#x27;--with-config-file-scan-dir=/usr/local/php/74/etc/php.d&#x27; \</span><br><span class="line">&#x27;--with-fpm-user=www&#x27; \</span><br><span class="line">&#x27;--with-fpm-group=www&#x27; \</span><br><span class="line">&#x27;--enable-fpm&#x27; \</span><br><span class="line">&#x27;--enable-opcache&#x27; \</span><br><span class="line">&#x27;--disable-fileinfo&#x27; \</span><br><span class="line">&#x27;--enable-mysqlnd&#x27; \</span><br><span class="line">&#x27;--with-mysqli=mysqlnd&#x27; \</span><br><span class="line">&#x27;--with-pdo-mysql=mysqlnd&#x27; \</span><br><span class="line">&#x27;--with-iconv-dir=/usr/local/libiconv&#x27; \</span><br><span class="line">&#x27;--with-freetype&#x27; \</span><br><span class="line">&#x27;--with-jpeg&#x27; \</span><br><span class="line">&#x27;--with-zlib&#x27; \</span><br><span class="line">&#x27;--enable-xml&#x27; \</span><br><span class="line">&#x27;--disable-rpath&#x27; \</span><br><span class="line">&#x27;--enable-bcmath&#x27; \</span><br><span class="line">&#x27;--enable-shmop&#x27; \</span><br><span class="line">&#x27;--enable-exif&#x27; \</span><br><span class="line">&#x27;--enable-sysvsem&#x27; \</span><br><span class="line">&#x27;--enable-inline-optimization&#x27; \</span><br><span class="line">&#x27;--with-curl=/usr/local/curl&#x27; \</span><br><span class="line">&#x27;--enable-mbregex&#x27; \</span><br><span class="line">&#x27;--enable-mbstring&#x27; \</span><br><span class="line">&#x27;--with-password-argon2&#x27; \</span><br><span class="line">&#x27;--with-sodium=/usr/local&#x27; \</span><br><span class="line">&#x27;--enable-gd&#x27; \</span><br><span class="line">&#x27;--with-openssl=/usr/local/openssl&#x27; \</span><br><span class="line">&#x27;--with-openssl-dir=/usr/local/openssl&#x27; \</span><br><span class="line">&#x27;--with-mhash&#x27; \</span><br><span class="line">&#x27;--enable-pcntl&#x27; \</span><br><span class="line">&#x27;--enable-sockets&#x27; \</span><br><span class="line">&#x27;--with-xmlrpc&#x27; \</span><br><span class="line">&#x27;--enable-ftp&#x27; \</span><br><span class="line">&#x27;--enable-intl&#x27; \</span><br><span class="line">&#x27;--with-xsl&#x27; \</span><br><span class="line">&#x27;--with-gettext&#x27; \</span><br><span class="line">&#x27;--with-zip=/usr/local&#x27; \</span><br><span class="line">&#x27;--enable-soap&#x27; \</span><br><span class="line">&#x27;--disable-debug&#x27; \</span><br><span class="line">&#x27;PKG_CONFIG_PATH=/usr/local/openssl/lib/pkgconfig:/usr/local/curl/lib/pkgconfig&#x27;</span><br><span class="line"></span><br><span class="line">make ZEND_EXTRA_LIBS=&#x27;-liconv&#x27; -j 8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu22 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql查看数据库空间大小</title>
      <link href="/posts/34dfb976.html"/>
      <url>/posts/34dfb976.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看总大小</span></span><br><span class="line">mysql&gt; use information_schema;</span><br><span class="line">mysql&gt; select concat(round(<span class="built_in">sum</span>(DATA_LENGTH/1024/1024),2),<span class="string">&#x27;MB&#x27;</span>) as data from TABLES;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看每个库的大小</span></span><br><span class="line">SELECT</span><br><span class="line">table_schema,SUM(AVG_ROW_LENGTH*TABLE_ROWS+INDEX_LENGTH)/1024/1024 AS total_mb</span><br><span class="line">FROM information_schema.TABLES group by table_schema;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选库查看</span></span><br><span class="line">select concat(round(<span class="built_in">sum</span>(DATA_LENGTH/1024/1024),2),<span class="string">&#x27;MB&#x27;</span>) as data from TABLES <span class="built_in">where</span> table_schema=<span class="string">&#x27;tdm_uat&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有数据库各容量大小</span></span><br><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line"><span class="built_in">sum</span>(table_rows) as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line"><span class="built_in">sum</span>(<span class="built_in">truncate</span>(data_length/1024/1024, 2)) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line"><span class="built_in">sum</span>(<span class="built_in">truncate</span>(index_length/1024/1024, 2)) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line">group by table_schema</span><br><span class="line">order by <span class="built_in">sum</span>(data_length) desc, <span class="built_in">sum</span>(index_length) desc;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有数据库各表容量大小</span></span><br><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">table_name as <span class="string">&#x27;表名&#x27;</span>,</span><br><span class="line">table_rows as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line"><span class="built_in">truncate</span>(data_length/1024/1024, 2) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line"><span class="built_in">truncate</span>(index_length/1024/1024, 2) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line">order by data_length desc, index_length desc;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看指定数据库容量大小</span></span><br><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line"><span class="built_in">sum</span>(table_rows) as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line"><span class="built_in">sum</span>(<span class="built_in">truncate</span>(data_length/1024/1024, 2)) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line"><span class="built_in">sum</span>(<span class="built_in">truncate</span>(index_length/1024/1024, 2)) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line"><span class="built_in">where</span> table_schema=<span class="string">&#x27;mysql&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看指定数据库各表容量大小</span></span><br><span class="line">select</span><br><span class="line">table_schema as <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">table_name as <span class="string">&#x27;表名&#x27;</span>,</span><br><span class="line">table_rows as <span class="string">&#x27;记录数&#x27;</span>,</span><br><span class="line"><span class="built_in">truncate</span>(data_length/1024/1024, 2) as <span class="string">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class="line"><span class="built_in">truncate</span>(index_length/1024/1024, 2) as <span class="string">&#x27;索引容量(MB)&#x27;</span></span><br><span class="line">from information_schema.tables</span><br><span class="line"><span class="built_in">where</span> table_schema=<span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">order by data_length desc, index_length desc;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx日志分析</title>
      <link href="/posts/5c09c70b.html"/>
      <url>/posts/5c09c70b.html</url>
      
        <content type="html"><![CDATA[<h1 id="统计PV-UV数"><a href="#统计PV-UV数" class="headerlink" title="统计PV,UV数"></a><strong>统计PV,UV数</strong></h1><ol><li>统计所有的PV数</li></ol><p><code>cat access.log | wc -l</code></p><ol><li>统计当天的PV数</li></ol><p><code>cat access.log | sed -n /</code>date “+%d/%b/%Y”<code>/p | wc -l</code></p><ol><li>统计指定某一天的PV数</li></ol><p><code>cat access.log | sed -n &#39;/20\/Aug\/2019/p&#39; | wc -l</code></p><ol><li>根据访问IP统计UV</li></ol><p><code>awk &#39;&#123;print $1&#125;&#39; access.log|sort | uniq -c |wc -l</code></p><ol><li>统计指定某一天访问IP统计UV</li></ol><p><code>cat access.log | grep &quot;07/Apr/2019:0[4-5]&quot; | awk &#39;&#123;print $1&#125;&#39; access.log|sort | uniq -c |wc -l</code></p><h1 id="IP相关统计"><a href="#IP相关统计" class="headerlink" title="IP相关统计"></a><strong>IP相关统计</strong></h1><ol><li>统计IP访问量（独立ip访问数量）</li></ol><p><code>awk &#39;&#123;print $1&#125;&#39; access.log | sort -n | uniq | wc -l</code></p><ol><li>查看某一时间段的IP访问量(4-5点)</li></ol><p><code>grep &quot;07/Apr/2019:0[4-5]&quot; access.log | awk &#39;&#123;print $1&#125;&#39; | sort | uniq -c| sort -nr | wc -l</code></p><ol><li>查看访问最频繁的前100个IP</li></ol><p><code>awk &#39;&#123;print $1&#125;&#39; access.log | sort -n |uniq -c | sort -rn | head -n 100</code></p><ol><li>查看访问100次以上的IP</li></ol><p><code>awk &#39;&#123;print $1&#125;&#39; access.log | sort -n |uniq -c |awk &#39;&#123;if($1 &gt;100) print $0&#125;&#39;|sort -rn</code></p><ol><li>查询某个IP的详细访问情况,按访问频率排序</li></ol><p><code>grep &#39;127.0.01&#39; access.log |awk &#39;&#123;print $7&#125;&#39;|sort |uniq -c |sort -rn |head -n 100</code></p><h1 id="页面访问统计"><a href="#页面访问统计" class="headerlink" title="页面访问统计"></a><strong>页面访问统计</strong></h1><ol><li>查看访问最频的页面(TOP100)</li></ol><p><code>awk &#39;&#123;print $7&#125;&#39; access.log | sort |uniq -c | sort -rn | head -n 100</code></p><ol><li>查看访问最频的页面([排除php页面】(TOP100)</li></ol><p><code>grep -v &quot;.php&quot;  access.log | awk &#39;&#123;print $7&#125;&#39; | sort |uniq -c | sort -rn | head -n 100</code> </p><ol><li>查询访问最频繁的URL</li></ol><p><code>awk &#39;&#123;print $7&#125;&#39; access.log|sort | uniq -c |sort -n -k 1 -r|more</code></p><ol><li>查看页面访问次数超过100次的页面</li></ol><p><code>cat access.log | cut -d &#39; &#39; -f 7 | sort |uniq -c | awk &#39;&#123;if ($1 &gt; 100) print $0&#125;&#39; | less</code></p><ol><li>查看最近1000条记录，访问量最高的页面</li></ol><p><code>tail -1000 access.log |awk &#39;&#123;print $7&#125;&#39;|sort|uniq -c|sort -nr|less</code></p><h1 id="每秒每分钟每小时请求量统计"><a href="#每秒每分钟每小时请求量统计" class="headerlink" title="每秒每分钟每小时请求量统计"></a><strong>每秒每分钟每小时请求量统计</strong></h1><ol><li>统计每秒的请求数,top100的时间点(精确到秒)</li></ol><p><code>awk &#39;&#123;print $4&#125;&#39; access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100</code></p><ol><li>统计每分钟的请求数,top100的时间点(精确到分钟)</li></ol><p><code>awk &#39;&#123;print $4&#125;&#39; access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100</code></p><ol><li>每小时的请求数,top100的时间点(精确到小时)</li></ol><p><code>awk &#39;&#123;print $4&#125;&#39; access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100</code></p><h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a><strong>性能分析</strong></h1><blockquote><p>*在nginx log中最后一个字段加入$request_time</p></blockquote><ol><li>列出传输时间超过 3 秒的页面，显示前20条</li></ol><p><code>cat access.log|awk &#39;($NF &gt; 3)&#123;print $7&#125;&#39;|sort -n|uniq -c|sort -nr|head -20</code></p><ol><li>列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条</li></ol><p><code>cat access.log|awk &#39;($NF &gt; 1 &amp;&amp; $7~/\.php/)&#123;print $7&#125;&#39;|sort -n|uniq -c|sort -nr|head -100</code></p><h1 id="蜘蛛抓取统计"><a href="#蜘蛛抓取统计" class="headerlink" title="蜘蛛抓取统计"></a><strong>蜘蛛抓取统计</strong></h1><ol><li>统计蜘蛛抓取次数</li></ol><p><code>grep &#39;Baiduspider&#39; access.log |wc -l</code></p><ol><li>统计蜘蛛抓取404的次数</li></ol><p><code>grep &#39;Baiduspider&#39; access.log |grep &#39;404&#39; | wc -l</code></p><h1 id="TCP连接统计"><a href="#TCP连接统计" class="headerlink" title="TCP连接统计"></a><strong>TCP连接统计</strong></h1><ol><li>查看当前TCP连接数</li></ol><p><code>netstat -tan | grep &quot;ESTABLISHED&quot; | grep &quot;:80&quot; | wc -l</code></p><ol><li>用tcpdump嗅探80端口的访问看看谁最高</li></ol><p><code>tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F&quot;.&quot; &#39;&#123;print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.&quot;$4&#125;&#39; | sort | uniq -c | sort -nr</code></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsync传输工具</title>
      <link href="/posts/273b3b5.html"/>
      <url>/posts/273b3b5.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 拷贝本地文件。当SRC和DES路径信息都不包含有单个冒号”:”分隔符时就启动这种工作模式。如：rsync -a /data /backup</span><br><span class="line">rsync [OPTION]... SRC DEST</span><br><span class="line"> </span><br><span class="line"># 使用一个远程shell程序(如rsh、ssh)来实现将本地机器的内容拷贝到远程机器。当DST路径地址包含单个冒号”:”分隔符时启动该模式。如：rsync -avz *.c foo:src</span><br><span class="line">rsync [OPTION]... SRC [USER@]HOST:DEST</span><br><span class="line"> </span><br><span class="line"># 使用一个远程shell程序(如rsh、ssh)来实现将远程机器的内容拷贝到本地机器。当SRC地址路径包含单个冒号”:”分隔符时启动该模式。如：rsync -avz foo:src/bar /data</span><br><span class="line">rsync [OPTION]... [USER@]HOST:SRC DEST</span><br><span class="line"> </span><br><span class="line"># 从远程rsync服务器中拷贝文件到本地机。当SRC路径信息包含”::”分隔符时启动该模式。如：rsync -av root@172.16.78.192::www /databack</span><br><span class="line">rsync [OPTION]... [USER@]HOST::SRC DEST</span><br><span class="line"> </span><br><span class="line"># 从本地机器拷贝文件到远程rsync服务器中。当DST路径信息包含”::”分隔符时启动该模式。如：rsync -av /databack root@172.16.78.192::www</span><br><span class="line">rsync [OPTION]... SRC [USER@]HOST::DEST</span><br><span class="line"> </span><br><span class="line"># 列远程机的文件列表。这类似于rsync传输，不过只要在命令中省略掉本地机信息即可。如：rsync -v rsync://172.16.78.192/www</span><br><span class="line">rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rsync推送和拉取</span><br><span class="line">推送:</span><br><span class="line">rsync -avzP -e <span class="string">&#x27;ssh -p 22&#x27;</span> /data/data.tar.gz root@192.168.0.2:/data/data.tar.gz  <span class="comment"># 将本地data目录下的data.tar.gz推送到远端data目录下data.tar.gz</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拉取:</span><br><span class="line"></span><br><span class="line">rsync -avzP -e <span class="string">&#x27;ssh -p 22&#x27;</span> root@192.168.0.2:/data/data.tar.gz  /data/data.tar.gz <span class="comment"># 将远端data目录下的data.tar.gz拉取到本地data目录下data.tar.gz</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">详细参数：</span><br><span class="line"></span><br><span class="line">-v, --verbose 详细模式输出</span><br><span class="line">-q, --quiet 精简输出模式</span><br><span class="line">-c, --checksum 打开校验开关，强制对文件传输进行校验</span><br><span class="line">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD</span><br><span class="line">-r, --recursive 对子目录以递归模式处理</span><br><span class="line">-R, --relative 使用相对路径信息</span><br><span class="line">-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。</span><br><span class="line">--backup-dir 将备份文件(如~filename)存放在在目录下。</span><br><span class="line">-suffix=SUFFIX 定义备份文件前缀</span><br><span class="line">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)</span><br><span class="line">-l, --links 保留软链结</span><br><span class="line">-L, --copy-links 想对待常规文件一样处理软链结</span><br><span class="line">--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结</span><br><span class="line">--safe-links 忽略指向SRC路径目录树以外的链结</span><br><span class="line">-H, --hard-links 保留硬链结</span><br><span class="line">-p, --perms 保持文件权限</span><br><span class="line">-o, --owner 保持文件属主信息</span><br><span class="line">-g, --group 保持文件属组信息</span><br><span class="line">-D, --devices 保持设备文件信息</span><br><span class="line">-t, --<span class="built_in">times</span> 保持文件时间信息</span><br><span class="line">-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间</span><br><span class="line">-n, --dry-run现实哪些文件将被传输</span><br><span class="line">-W, --whole-file 拷贝文件，不进行增量检测</span><br><span class="line">-x, --one-file-system 不要跨越文件系统边界</span><br><span class="line">-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节</span><br><span class="line">-e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步</span><br><span class="line">--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息</span><br><span class="line">-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件</span><br><span class="line">--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件</span><br><span class="line">--delete 删除那些DST中SRC没有的文件</span><br><span class="line">--delete-excluded 同样删除接收端那些被该选项指定排除的文件</span><br><span class="line">--delete-after 传输结束以后再删除</span><br><span class="line">--ignore-errors 及时出现IO错误也进行删除</span><br><span class="line">--max-delete=NUM 最多删除NUM个文件</span><br><span class="line">--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输</span><br><span class="line">--force 强制删除目录，即使不为空</span><br><span class="line">--numeric-ids 不将数字的用户和组ID匹配为用户名和组名</span><br><span class="line">--<span class="built_in">timeout</span>=TIME IP超时时间，单位为秒</span><br><span class="line">-I, --ignore-times 不跳过那些有同样的时间和长度的文件</span><br><span class="line">--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间</span><br><span class="line">--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0</span><br><span class="line">-T --temp-dir=DIR 在DIR中创建临时文件</span><br><span class="line">--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份</span><br><span class="line">-P 等同于 --partial</span><br><span class="line">--progress 显示备份过程</span><br><span class="line">-z, --compress 对备份的文件在传输时进行压缩处理</span><br><span class="line">--exclude=PATTERN 指定排除不需要传输的文件模式</span><br><span class="line">--include=PATTERN 指定不排除而需要传输的文件模式</span><br><span class="line">--exclude-from=FILE 排除FILE中指定模式的文件</span><br><span class="line">--include-from=FILE 不排除FILE指定模式匹配的文件</span><br><span class="line">--version 打印版本信息</span><br><span class="line">--address 绑定到特定的地址</span><br><span class="line">--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件</span><br><span class="line">--port=PORT 指定其他的rsync服务端口</span><br><span class="line">--blocking-io 对远程shell使用阻塞IO</span><br><span class="line">-stats 给出某些文件的传输状态</span><br><span class="line">--progress 在传输时现实传输过程</span><br><span class="line">--log-format=formAT 指定日志文件格式</span><br><span class="line">--password-file=FILE 从FILE中得到密码</span><br><span class="line">--bwlimit=KBPS 限制I/O带宽，KBytes per second</span><br><span class="line">-h, --<span class="built_in">help</span> 显示帮助信息</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rsync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx匹配规则</title>
      <link href="/posts/98419899.html"/>
      <url>/posts/98419899.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="comment">#波浪线表示执行一个正则匹配，区分大小写</span></span><br><span class="line"></span><br><span class="line">~* <span class="comment">#表示执行一个正则匹配，不区分大小写</span></span><br><span class="line"></span><br><span class="line">^~ <span class="comment">#^~表示普通字符匹配，如果该选项匹配，只匹配该选项，不匹配别的选项，一般用来匹配目录</span></span><br><span class="line"></span><br><span class="line">= <span class="comment">#进行普通字符精确匹配</span></span><br><span class="line"></span><br><span class="line">@ <span class="comment">#&quot;@&quot; 定义一个命名的 location，使用在内部定向时，例如 error_page, try_file</span></span><br></pre></td></tr></table></figure><p><strong>location 匹配的优先级(与location在配置文件中的顺序无关)</strong></p><p>&#x3D; 精确匹配会第一个被处理。如果发现精确匹配，nginx停止搜索其他匹配。普通字符匹配，正则表达式规则和长的块规则将被优先和查询匹配，也就是说如果该项匹配还需去看有没有正则表达式匹配和更长的匹配。^~ 则只匹配该规则，nginx停止搜索其他匹配，否则nginx会继续处理其他location指令。最后匹配理带有”<del>“和”</del>*”的指令，如果找到相应的匹配，则nginx停止搜索其他匹配；当没有正则表达式或者没有正则表达式被匹配的情况下，那么匹配程度最高的逐字匹配指令会被使用。</p><p><strong>location 优先级官方文档</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. Directives with the = prefix that match the query exactly. If found, searching stops.</span><br><span class="line">2. All remaining directives with conventional strings, longest match first. If this match used the ^~ prefix, searching stops.</span><br><span class="line">3. Regular expressions, <span class="keyword">in</span> order of definition <span class="keyword">in</span> the configuration file.</span><br><span class="line">4. If <span class="comment">#3 yielded a match, that result is used. Else the match from #2 is used.</span></span><br><span class="line">5. =前缀的指令严格匹配这个查询。如果找到，停止搜索。</span><br><span class="line">6. 所有剩下的常规字符串，最长的匹配。如果这个匹配使用^〜前缀，搜索停止。</span><br><span class="line">7. 正则表达式，在配置文件中定义的顺序。</span><br><span class="line">8. 如果第3条规则产生匹配的话，结果被使用。否则，使用第2条规则的结果。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql备份</title>
      <link href="/posts/b0f371d5.html"/>
      <url>/posts/b0f371d5.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySql数据库备份的几种方式"><a href="#MySql数据库备份的几种方式" class="headerlink" title="[MySql数据库备份的几种方式]"></a>[MySql数据库备份的几种方式]</h1><h3 id="mysqldump工具备份"><a href="#mysqldump工具备份" class="headerlink" title="mysqldump工具备份"></a><strong>mysqldump工具备份</strong></h3><p>备份整个数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysqldump -u root -h host -p dbname &gt; backdb.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>备份数据库中的某个表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysqldump -u root -h host -p dbname tbname1, tbname2 &gt; backdb.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>备份多个数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysqldump -u root -h host -p --databases dbname1, dbname2 &gt; backdb.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>备份系统中所有数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysqldump -u root -h host -p --all-databases &gt; backdb.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="直接复制整个数据库目录-对于InnoDB存储引擎不适用-备份"><a href="#直接复制整个数据库目录-对于InnoDB存储引擎不适用-备份" class="headerlink" title="直接复制整个数据库目录(对于InnoDB存储引擎不适用)备份"></a><strong>直接复制整个数据库目录(对于InnoDB存储引擎不适用)备份</strong></h3><p>windowns: installpath&#x2F;mysql&#x2F;data</p><p>linux: &#x2F;var&#x2F;lib&#x2F;mysql</p><p>在复制前需要先执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MYSQL&gt; LOCK TABLES;</span><br><span class="line"># 在复制过程中允许客户继续查询表，</span><br><span class="line">MYSQL&gt; FLUSH TABLES;</span><br><span class="line"># 将激活的索引页写入硬盘。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mysqlhotcopy工具备份"><a href="#mysqlhotcopy工具备份" class="headerlink" title="mysqlhotcopy工具备份"></a><strong>mysqlhotcopy工具备份</strong></h3><p>备份数据库或表最快的途径，只能运行在数据库目录所在的机器上，并且只能备份MyISAM类型的表。</p><p>要使用该备份方法必须可以访问备份的表文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysqlhotcopy -u root -p dbname /path/to/new_directory;</span><br><span class="line">#将数据库复制到new_directory目录。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mysql命令导入sql文件还原"><a href="#mysql命令导入sql文件还原" class="headerlink" title="mysql命令导入sql文件还原"></a><strong>mysql命令导入sql文件还原</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysql -u root -p [dbname] &lt; backup.sql</span><br><span class="line"># 执行前需要先创建dbname数据库，如果backup.sql是mysqldump创建的备份文件则执行是不需要dbname。</span><br><span class="line">MYSQL&gt; source backup.sql;</span><br><span class="line"># 执行source命令前需要先选择数据库。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="直接复制数据库目录还原"><a href="#直接复制数据库目录还原" class="headerlink" title="直接复制数据库目录还原"></a><strong>直接复制数据库目录还原</strong></h3><p><strong>注： 该方式必须确保原数据库和待还原的数据库主版本号一致，并且只适用于MyISAM引擎的表。</strong></p><ol><li>关闭mysql服务。</li><li>将备份的文件或目录覆盖mysql的data目录。</li><li>启动mysql服务。</li><li>对于linux系统，复制完文件后需要将文件的用户和组更改为mysql运行的用户和组。</li></ol><h3 id="mysqlhotcopy快速恢复"><a href="#mysqlhotcopy快速恢复" class="headerlink" title="mysqlhotcopy快速恢复"></a><strong>mysqlhotcopy快速恢复</strong></h3><p>停止mysql服务，将备份数据库文件复制到存放数据的位置（mysql的data文件夹），重先启动mysql服务即可(可能需要指定数据库文件的所有者)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; cp -R /usr/backup/test /usr/local/mysql/data</span><br><span class="line"># 如果恢复的数据库已经存在，则使用DROP语句删除已经存在的数据库之后，恢复才能成功，还需要保证数据库版本兼容。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="相同版本数据库之间迁移"><a href="#相同版本数据库之间迁移" class="headerlink" title="相同版本数据库之间迁移"></a><strong>相同版本数据库之间迁移</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysqldump -h www.abc.com -uroot -p password dbname |</span><br><span class="line">$&gt; mysqldump -h www.bcd.com -uroot -p password</span><br><span class="line"># 将服务器www.abc.com的数据库dbname迁移到服务器www.bcd.com的相同版本数据库上。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="不同版本的mysql数据库之间的迁移"><a href="#不同版本的mysql数据库之间的迁移" class="headerlink" title="不同版本的mysql数据库之间的迁移"></a><strong>不同版本的mysql数据库之间的迁移</strong></h3><p>备份原数据库。</p><p>卸载原数据库。</p><p>安装新数据库。</p><p>在新数据库中还原备份的数据库数据。</p><p>数据库用户访问信息需要备份mysql数据库。</p><p>默认字符集问题，MySQL4.x中使用latin1作为默认字符集，mysql5.x使用utf8作为默认字符集。如果有中文数据需要对默认字符集进行更改。</p><p>不同数据库之间的迁移</p><p>MyODBC工具实现MySQL和SQL Server之间的迁移。</p><p>MySQL Migration Toolkit工具。</p><h3 id="表的导出和导入"><a href="#表的导出和导入" class="headerlink" title="表的导出和导入"></a><strong>表的导出和导入</strong></h3><p>SELECT …… INTO OUTFILE 导出文本文件,该方法只能导出到数据库服务器上，并且导出文件不能已存在。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MYSQL&gt; SELECT ...... INTO OUTFILE filename [OPTIONS]</span><br><span class="line">MYSQL&gt; SELECT * FROM test.person INTO OUTFILE &quot;C:\person0.txt&quot;;</span><br><span class="line"># 将表person里的数据导入为文本文件person0.txt。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mysqldump文件导出文本文件(和INTO OUTFILE不一样的是该方法所有的选项不需要添加引号)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysqldump -T path -u root -p dbname [tables] [OPTIONS]</span><br><span class="line"># -T参数表明导出文本文件。path导出数据的目录。</span><br><span class="line">$&gt; mysqldump -T C:\test person -u root -p</span><br><span class="line"># 将test表中的person表导出到文本文件。执行成功后test目录下会有两个文件，person.sql和person.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mysql命令导出文本文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MYSQL&gt; mysql -u root -p --execute=&quot;SELECT * FROM person;&quot; test &gt; C:\person3.txt;</span><br><span class="line"># 将test数据库中的person表数据导出到person3.txt文本文件中。--vartical参数可以将一行分为多行显示。</span><br><span class="line">MYSQL&gt; mysql -u root -p --vartical --execute=&quot;SELECT * FROM person;&quot; test &gt; C:\person3.txt;</span><br><span class="line"># --html将表导出为html文件，--xml文件将表导出为xml文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LOAD DATA INFILE导入文本文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MYSQL&gt; LOAD DATA INFILE &#x27;filename.txt&#x27; INTO TABLE tablename [OPTIONS] [IGNORE number LINES];</span><br><span class="line"># [IGNORE number LINES]表示忽略行数</span><br><span class="line">MYSQL&gt; LOAD DATA INFILE &#x27;C:\person0.txt&#x27; INTO TABLE test.person;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mysqlimport导入文本文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysqlimport -u root -p dbname filename.txt [OPSTONS]</span><br><span class="line"># 导入的表名有文件名决定，导入数据之前表必须存在</span><br><span class="line">$&gt; mysqlimport -uroot -p test C:\backup\person.txt</span><br><span class="line"># 将数据导入到test数据库的person表中。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用mysqlbinlog恢复数据"><a href="#使用mysqlbinlog恢复数据" class="headerlink" title="使用mysqlbinlog恢复数据"></a><strong>使用mysqlbinlog恢复数据</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysqlbinlog [option] filename | mysql -u user -p password</span><br><span class="line"># filename为二进制日志文件，</span><br><span class="line">$&gt; mysqlbinlog --stop-date=&quot;2013-03-30 15:27:47&quot; D:\MySQL\log\binlog\binlog.000008 | mysql -u root -p password</span><br><span class="line"># 根据日志文件binlog.000008将数据恢复到2013-03-30 15:27:47以前的操作。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动二进制日志"><a href="#启动二进制日志" class="headerlink" title="启动二进制日志"></a><strong>启动二进制日志</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log-bin = path/filename#日志文件存储目录和文件名</span><br><span class="line">expire_log_days = 10#日志自动删除时间</span><br><span class="line">max_binlog_size = 100M# 日志文件最大大小</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看二进制日志"><a href="#查看二进制日志" class="headerlink" title="查看二进制日志"></a><strong>查看二进制日志</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MYSQL&gt; SHOW VARIABLES LIKE &#x27;log_%&#x27;;</span><br><span class="line">MYSQL&gt; SHOW BINARY LOGS;</span><br><span class="line">$&gt; mysqlbinlog filename</span><br><span class="line"># filename为二进制日志文件名。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除二进制日志"><a href="#删除二进制日志" class="headerlink" title="删除二进制日志"></a><strong>删除二进制日志</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MYSQL&gt; RESET MASTER; #删除所有二进制日志MYSQL&gt; PURGE &#123;MASTER | BINARY&#125; LOGS TO &#x27;log_name&#x27;;#删除文件编号小于log_name编号的文件MYSQL&gt; PURGE &#123;MASTER | BINARY&#125; LOGS BEFORE &#x27;date&#x27;;#删除指定日期以前的文件</span><br></pre></td></tr></table></figure><h3 id="暂时停止二进制日志（不需要重启mysql服务）"><a href="#暂时停止二进制日志（不需要重启mysql服务）" class="headerlink" title="暂时停止二进制日志（不需要重启mysql服务）"></a><strong>暂时停止二进制日志（不需要重启mysql服务）</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MYSQL&gt; SET sql_log_bin = &#123;0|1&#125;#暂停或启动二进制日志。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">一. mysqldump命令备份数据</span><br><span class="line">在MySQL中提供了命令行导出数据库数据以及文件的一种方便的工具mysqldump,我们可以通过命令行直接实现数据库内容的导出dump,首先我们简单了解一下mysqldump命令用法:</span><br><span class="line"></span><br><span class="line"><span class="comment">#MySQLdump常用</span></span><br><span class="line">mysqldump -u root -p --databases 数据库1 数据库2 &gt; xxx.sql</span><br><span class="line">二. mysqldump常用操作示例</span><br><span class="line">1.备份全部数据库的数据和结构</span><br><span class="line">mysqldump -uroot -p123456 -A &gt; /data/mysqlDump/mydb.sql</span><br><span class="line">2.备份全部数据库的结构（加 -d 参数）</span><br><span class="line">mysqldump -uroot -p123456 -A -d &gt; /data/mysqlDump/mydb.sql</span><br><span class="line">3.备份全部数据库的数据(加 -t 参数)</span><br><span class="line">mysqldump -uroot -p123456 -A -t &gt; /data/mysqlDump/mydb.sql</span><br><span class="line">4.备份单个数据库的数据和结构(,数据库名mydb)</span><br><span class="line">mysqldump -uroot-p123456 mydb &gt; /data/mysqlDump/mydb.sql</span><br><span class="line">5. 备份单个数据库的结构</span><br><span class="line">mysqldump -uroot -p123456 mydb -d &gt; /data/mysqlDump/mydb.sql</span><br><span class="line">6. 备份单个数据库的数据</span><br><span class="line">mysqldump -uroot -p123456 mydb -t &gt; /data/mysqlDump/mydb.sql</span><br><span class="line">7. 备份多个表的数据和结构（数据，结构的单独备份方法与上同）</span><br><span class="line">mysqldump -uroot -p123456 mydb t1 t2 &gt; /data/mysqlDump/mydb.sql</span><br><span class="line">8. 一次备份多个数据库</span><br><span class="line">mysqldump -uroot -p123456 --databases db1 db2 &gt; /data/mysqlDump/mydb.sql</span><br><span class="line">三. 还原 MySQL 备份内容</span><br><span class="line">有两种方式还原，第一种是在 MySQL 命令行中，第二种是使用 SHELL 行完成还原</span><br><span class="line"></span><br><span class="line">1.在系统命令行中，输入如下实现还原：</span><br><span class="line">mysql -uroot -p123456 &lt; /data/mysqlDump/mydb.sql</span><br><span class="line">2.在登录进入mysql系统中,通过<span class="built_in">source</span>指令找到对应系统中的文件进行还原：</span><br><span class="line">mysql&gt; <span class="built_in">source</span> /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx中文乱码</title>
      <link href="/posts/1ebd6834.html"/>
      <url>/posts/1ebd6834.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream you.domainName.com &#123;</span><br><span class="line">server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name you.domainName.com;</span><br><span class="line">  charset utf-8;  <span class="comment">##添加这段</span></span><br><span class="line"></span><br><span class="line">  location /examples &#123;</span><br><span class="line">    <span class="built_in">return</span> 403;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后，重启Nginx服务。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh端口转发</title>
      <link href="/posts/b930f663.html"/>
      <url>/posts/b930f663.html</url>
      
        <content type="html"><![CDATA[<p>本地端口转发命令：</p><p><code>ssh -L &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSH hostname&gt;</code></p><p>例如，需要把本地8080端口转发到172.18.247.180这台机器上的8888端口，只需要执行下面的命令即可：</p><p><code>ssh -L 8080:172.18.247.180:8888 172.18.247.180</code></p><p>这个命令可以稍微优化一下：</p><p><code>ssh -CfNg -L 8081:172.18.247.180:8888 172.18.247.180</code></p><p>但是这样每次都要去记忆IP和端口也不是很方便，所以可以考虑使用脚本来完成，下面就是一个我临时写的脚本，命令为forward.sh：</p><p><code>#!/bin/bash if [ $1 == &quot;start&quot; ]; then     echo &quot;port forwarding starting...&quot;     ssh -CfNg -L 8081:172.18.247.180:8888 172.18.247.180     ssh -CfNg -L 8082:172.18.247.181:8888 172.18.247.181 elif [ $1 == &quot;stop&quot; ]; then     echo &quot;stop port forwards&quot;     ssh_pids=$(ps -ef | grep -E &#39;ssh\ -CfNg\ -L|ssh-agent\ -l&#39; | awk &#39;&#123;print $2&#125;&#39;)     echo $&#123;ssh_pids&#125;     kill $&#123;ssh_pids&#125;     echo &quot;port forward had stopped&quot; else     echo &quot;port forwarding starting...&quot;     ssh -CfNg -L $1:$2:$3 $4 fi ps -ef | grep ssh | grep -v grep</code></p><p>可以将常用的转发规则直接写进脚本中，需要打开转发的时候，运行脚本：</p><p><code>sh forward.sh start</code></p><p>即可开始所有的转发规则，需要停止就运行：</p><p><code>sh forward.sh stop</code></p><p>停止所有转发。如果有临时的转发规则，则可以执行：</p><p><code>sh forward.sh &lt;local port&gt; &lt;remote host&gt; &lt;remote port&gt; &lt;SSH hostname&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql主从同步</title>
      <link href="/posts/9279f870.html"/>
      <url>/posts/9279f870.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Hosts</th><th>CPU</th><th>MEM</th><th>HD</th><th>OS</th></tr></thead><tbody><tr><td>192.168.1.102  db01</td><td>8</td><td>16G</td><td>100G</td><td>Ubuntu20.04</td></tr><tr><td>192.168.1.105  db02</td><td>8</td><td>16G</td><td>100G</td><td>Ubuntu20.04</td></tr><tr><td>192.168.1.108  db03</td><td>8</td><td>16G</td><td>100G</td><td>Ubuntu20.04</td></tr></tbody></table><p>安装前修改两台服务器的hosts</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三臺台服务器都要操作</span></span><br><span class="line">sudo vim /etc/hosts</span><br><span class="line">192.168.1.102 db01</span><br><span class="line">192.168.1.105 db02</span><br><span class="line">192.168.1.108 db03</span><br></pre></td></tr></table></figure><p>創建MySQL存儲位置及日誌位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /data/mysql &amp;&amp; sudo <span class="built_in">mkdir</span> -p /data/logs/mysql</span><br><span class="line">sudo <span class="built_in">chmod</span> -R mysql:mysql /data/mysql &amp;&amp; sudo <span class="built_in">chmod</span> -R mysql:mysql /data/logs/mysql</span><br></pre></td></tr></table></figure><h3 id="MySql5-7安装-三臺服務器進行同樣操作"><a href="#MySql5-7安装-三臺服務器進行同樣操作" class="headerlink" title="MySql5.7安装(三臺服務器進行同樣操作)"></a>MySql5.7安装(三臺服務器進行同樣操作)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#下载所需安装包</span></span></span><br><span class="line">cd /opt</span><br><span class="line">sudo wget http://mirrors.ustc.edu.cn/mysql-ftp/Downloads/MySQL-5.7/mysql-server_5.7.34-1ubuntu18.04_amd64.deb-bundle.tar</span><br><span class="line">sudo tar -xvf mysql-server_5.7.34-1ubuntu18.04_amd64.deb-bundle.tar  #解压安装包</span><br><span class="line"></span><br><span class="line">sudo wget http://archive.ubuntu.com/ubuntu/pool/main/m/mecab/libmecab2_0.996-10build1_amd64.deb #下载依赖包</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>db1上操作</p><p>在安装包所在的目录下执行（安装顺序不可更改）</p><h5 id="1、安装mysql-common-5-7-34-1ubuntu18-04-amd64-deb"><a href="#1、安装mysql-common-5-7-34-1ubuntu18-04-amd64-deb" class="headerlink" title="1、安装mysql-common_5.7.34-1ubuntu18.04_amd64.deb"></a>1、安装<code>mysql-common_5.7.34-1ubuntu18.04_amd64.deb</code></h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libtinfo5 -y</span><br><span class="line">sudo dpkg -<span class="selector-tag">i</span> mysql-common_5.<span class="number">7.34</span>-<span class="number">1</span>ubuntu18.<span class="number">04</span>_amd64<span class="selector-class">.deb</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2、安装mysql-community-client-5-7-34-1ubuntu18-04-amd64-deb"><a href="#2、安装mysql-community-client-5-7-34-1ubuntu18-04-amd64-deb" class="headerlink" title="2、安装mysql-community-client_5.7.34-1ubuntu18.04_amd64.deb"></a>2、安装<code>mysql-community-client_5.7.34-1ubuntu18.04_amd64.deb</code></h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -<span class="selector-tag">i</span> mysql-community-client_5.<span class="number">7.34</span>-<span class="number">1</span>ubuntu18.<span class="number">04</span>_amd64<span class="selector-class">.deb</span></span><br></pre></td></tr></table></figure><h5 id="3、安装mysql-client-5-7-34-1ubuntu18-04-amd64-deb"><a href="#3、安装mysql-client-5-7-34-1ubuntu18-04-amd64-deb" class="headerlink" title="3、安装mysql-client_5.7.34-1ubuntu18.04_amd64.deb"></a>3、安装<code>mysql-client_5.7.34-1ubuntu18.04_amd64.deb</code></h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -<span class="selector-tag">i</span> mysql-client_5.<span class="number">7.34</span>-<span class="number">1</span>ubuntu18.<span class="number">04</span>_amd64<span class="selector-class">.deb</span></span><br></pre></td></tr></table></figure><h5 id="4、安装-mysql-community-server-5-7-29-1ubuntu18-04-amd64-deb"><a href="#4、安装-mysql-community-server-5-7-29-1ubuntu18-04-amd64-deb" class="headerlink" title="4、安装 mysql-community-server_5.7.29-1ubuntu18.04_amd64.deb"></a>4、安装 <code>mysql-community-server_5.7.29-1ubuntu18.04_amd64.deb</code></h5><p>安装过程中会提示缺少依赖包libmecab2：<br> 所以这次先安装依赖包<code>libmecab2</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -<span class="selector-tag">i</span> libmecab2_0.<span class="number">996</span>-<span class="number">10</span>build1_amd64<span class="selector-class">.deb</span></span><br></pre></td></tr></table></figure><p>然后安装<code>mysql-community-server_5.7.34-1ubuntu18.04_amd64.deb</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -<span class="selector-tag">i</span> mysql-community-server_5.<span class="number">7.34</span>-<span class="number">1</span>ubuntu18.<span class="number">04</span>_amd64<span class="selector-class">.deb</span></span><br></pre></td></tr></table></figure><p>安装过程中会要求在粉色的大页面上输入密码，输入两次即可，至此安装完成。</p><h5 id="5、修改配置文件"><a href="#5、修改配置文件" class="headerlink" title="5、修改配置文件"></a>5、修改配置文件</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#将内容修改成如下</span></span><br><span class="line">[mysqld]</span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir         = /data/mysql</span><br><span class="line">log-error       = /data/logs/mysql/error.log</span><br><span class="line"></span><br><span class="line">sql_mode =</span><br><span class="line"></span><br><span class="line">user = mysql</span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line">port = 3307 </span><br><span class="line"></span><br><span class="line">log-bin = mysql-bin</span><br><span class="line">server-id = 1</span><br><span class="line">binlog-ignore-db = mysql,information_schema,performance_schema</span><br><span class="line">auto-increment-offset = 3</span><br><span class="line">auto-increment-increment = 3</span><br><span class="line"></span><br><span class="line">slave_parallel_type = <span class="string">&#x27;logical_clock&#x27;</span></span><br><span class="line">slave_parallel_workers = 8</span><br><span class="line"></span><br><span class="line">relay_log = relay-bin</span><br><span class="line">log-slave-updates = ON</span><br><span class="line"></span><br><span class="line">init-connect = <span class="string">&#x27;SET NAMES utf8mb4&#x27;</span></span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line">default_storage_engine = InnoDB</span><br><span class="line">innodb_file_per_table = 1</span><br><span class="line">innodb_open_files = 500</span><br><span class="line">innodb_buffer_pool_size = 64M</span><br><span class="line">innodb_write_io_threads = 4</span><br><span class="line">innodb_read_io_threads = 4</span><br><span class="line">innodb_thread_concurrency = 0</span><br><span class="line">innodb_purge_threads = 1</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">innodb_log_buffer_size = 2M</span><br><span class="line">innodb_log_file_size = 32M</span><br><span class="line">innodb_log_files_in_group = 3</span><br><span class="line">innodb_max_dirty_pages_pct = 90</span><br><span class="line">innodb_lock_wait_timeout = 120</span><br><span class="line"></span><br><span class="line">bulk_insert_buffer_size = 8M</span><br><span class="line">myisam_sort_buffer_size = 8M</span><br><span class="line">myisam_max_sort_file_size = 10G</span><br><span class="line">myisam_repair_threads = 1</span><br><span class="line"></span><br><span class="line">interactive_timeout = 28800</span><br><span class="line">wait_timeout = 28800</span><br><span class="line"></span><br><span class="line">explicit_defaults_for_timestamp = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>修改MySQL存儲位置後需要修改&#x2F;etc&#x2F;apparmor.d&#x2F;usr.sbin.mysqld </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apparmor.d/usr.sbin.mysqld<span class="comment"># Allow data dir access  /data/mysql/ r,  /data/mysql/** rwk,  # Allow log file access  /data/logs/mysql/ r,  /data/logs/mysql/** rwk,  # 重啟apparmorsudo systemctl restart apparmor</span></span><br></pre></td></tr></table></figure><h6 id="以上操作在DB2和DB3上面重复操作，只需修改配置文件中的server-id-x3D-2"><a href="#以上操作在DB2和DB3上面重复操作，只需修改配置文件中的server-id-x3D-2" class="headerlink" title="以上操作在DB2和DB3上面重复操作，只需修改配置文件中的server-id &#x3D; 2"></a>以上操作在DB2和DB3上面重复操作，只需修改配置文件中的server-id &#x3D; 2</h6><p>启动mysql：<code>sudo service mysql start</code><br>停止mysql：<code>sudo service mysql stop</code><br>重启mysql：<code>sudo service mysql restart</code></p><p>加入开机启动：<code>sudo systemctl enable mysql</code></p><h3 id="MySql主備模式"><a href="#MySql主備模式" class="headerlink" title="MySql主備模式"></a>MySql主備模式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># db01</span></span><br><span class="line"><span class="comment">#进入数据库</span></span><br><span class="line">sudo mysql -u root -p </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建同步用户</span></span><br><span class="line">mysql&gt; grant all on *.* to replication@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看记录master status</span></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+---------------------------------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB                            | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+---------------------------------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |     1288 |              | mysql,information_schema,performance_schema |                   |</span><br><span class="line">+------------------+----------+--------------+---------------------------------------------+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># db02和db03都進行一下操作</span></span><br><span class="line"><span class="comment">#进入数据库</span></span><br><span class="line">sudo mysql -u root -p </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建同步用户</span></span><br><span class="line">mysql&gt; grant all on *.* to replication@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看记录master status</span></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+---------------------------------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB                            | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+---------------------------------------------+-------------------+</span><br><span class="line">| mysql-bin.000004 |     1288 |              | mysql,information_schema,performance_schema |                   |</span><br><span class="line">+------------------+----------+--------------+---------------------------------------------+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>进行同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##db02</span></span><br><span class="line"><span class="comment">#设置主服务器的信息</span></span><br><span class="line">mysql&gt; change master to master_host=<span class="string">&#x27;db01&#x27;</span>,master_port=3307,master_user=<span class="string">&#x27;replication&#x27;</span>, master_password=<span class="string">&#x27;password&#x27;</span>, master_log_file=<span class="string">&#x27;mysql-bin.000004&#x27;</span>, master_log_pos=1288;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动同步</span></span><br><span class="line">mysql&gt; start slave; </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看同步状态，要两个yes才成功</span></span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: db1</span><br><span class="line">                  Master_User: replication</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 1288</span><br><span class="line">               Relay_Log_File: relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 484</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1288</span><br><span class="line">              Relay_Log_Space: 685</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: f2770e08-e2fd-11eb-a6f7-005056b9aeb1</span><br><span class="line">             Master_Info_File: /data/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has <span class="built_in">read</span> all relay <span class="built_in">log</span>; waiting <span class="keyword">for</span> more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#db03</span></span><br><span class="line"><span class="comment">#设置主服务器的信息</span></span><br><span class="line">mysql&gt; change master to master_host=<span class="string">&#x27;db03&#x27;</span>,master_port=3307,master_user=<span class="string">&#x27;replication&#x27;</span>, master_password=<span class="string">&#x27;password&#x27;</span>, master_log_file=<span class="string">&#x27;mysql-bin.000004&#x27;</span>, master_log_pos=1288;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动同步</span></span><br><span class="line">mysql&gt; start slave; </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看同步状态，要两个yes才成功</span></span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: db1</span><br><span class="line">                  Master_User: replication</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 1288</span><br><span class="line">               Relay_Log_File: relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 484</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1288</span><br><span class="line">              Relay_Log_Space: 685</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: f2770e08-e2fd-11eb-a6f7-005056b9aeb1</span><br><span class="line">             Master_Info_File: /data/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has <span class="built_in">read</span> all relay <span class="built_in">log</span>; waiting <span class="keyword">for</span> more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>mysql主備同步完成；</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elk日志收集</title>
      <link href="/posts/484abec3.html"/>
      <url>/posts/484abec3.html</url>
      
        <content type="html"><![CDATA[<h1 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h1><h3 id="客户端部署"><a href="#客户端部署" class="headerlink" title="客户端部署"></a>客户端部署</h3><p>目前的架构是elasticsearch+logstash+filebeat+kibana+redis</p><p>通过filebeat收集数据发送到redis，然后logstash从redis中取数据发送到elasticsearch，最后通过kibana展示。</p><p>本文章讲述如何收集客户端日志。</p><p>es：10.168.2.44 端口9200</p><p>redis:10.168.2.205端口30379</p><h4 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h4><p>下载安装包： wget <a href="https://artifacts.elastic.co/downloads/logstash/logstash-7.13.2-linux-x86_64.tar.gz">https://artifacts.elastic.co/downloads/logstash/logstash-7.13.2-linux-x86_64.tar.gz</a> </p><p>解压：tar zxvf logstash-7.13.2-linux-x86_64.tar.gz  &amp;&amp; mv logstash-7.13.2 &#x2F;usr&#x2F;local&#x2F;logstash</p><p><strong>创建logstash.conf文件，添加以下内容</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">   redis &#123;</span><br><span class="line">     host =&gt; <span class="string">&quot;10.168.2.205&quot;</span></span><br><span class="line">     port =&gt; <span class="string">&quot;30379&quot;</span></span><br><span class="line">     db =&gt; <span class="string">&quot;2&quot;</span></span><br><span class="line">     password =&gt; <span class="string">&quot;password&quot;</span></span><br><span class="line">     data_type =&gt; <span class="string">&quot;list&quot;</span></span><br><span class="line">     key =&gt; <span class="string">&quot;vpn_log&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    <span class="keyword">if</span> [fields][app] == <span class="string">&quot;system&quot;</span> &#123;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">            hosts =&gt; [<span class="string">&quot;10.168.2.44:9200&quot;</span>]</span><br><span class="line">            user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">            password =&gt; <span class="string">&quot;password&quot;</span></span><br><span class="line">            index =&gt; <span class="string">&quot;vpn_syslog-%&#123;+YYYY.MM.dd&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> [fields][app] == <span class="string">&quot;vpn&quot;</span> &#123;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">            hosts =&gt; [<span class="string">&quot;10.168.2.44:9200&quot;</span>]</span><br><span class="line">            user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">            password =&gt; <span class="string">&quot;password&quot;</span></span><br><span class="line">            index =&gt; <span class="string">&quot;vpn_server-%&#123;+YYYY.MM.dd&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 注意logstash与filebeat里的配置文件参数要对应</span></span><br></pre></td></tr></table></figure><h4 id="安装filebeat"><a href="#安装filebeat" class="headerlink" title="安装filebeat"></a>安装filebeat</h4><p>下载安装包： wget <a href="https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.13.2-linux-x86_64.tar.gz">https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.13.2-linux-x86_64.tar.gz</a></p><p>解压：tar zxvf filebeat-7.13.2-linux-x86_64.tar.gz &amp;&amp; mv filebeat-7.13.2-linux-x86_64 &#x2F;usr&#x2F;local&#x2F;filebeat</p><p>修改filebeat.yml配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/messages  <span class="comment">##位置</span></span><br><span class="line">  fields:</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">&quot;vpn_syslog&quot;</span>   <span class="comment">## 类型</span></span><br><span class="line">    app: <span class="string">&quot;syslog&quot;</span><span class="comment">##类型</span></span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /root/vpnserver/server_log/*.<span class="built_in">log</span></span><br><span class="line">  fields:</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">&quot;vpn_server&quot;</span></span><br><span class="line">    app: <span class="string">&quot;vpn&quot;</span></span><br><span class="line">output.redis:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  hosts: [<span class="string">&quot;10.168.2.205:30379&quot;</span>]</span><br><span class="line">  password: <span class="string">&quot;password&quot;</span></span><br><span class="line">  key: <span class="string">&quot;vpn_log&quot;</span></span><br><span class="line">  db: 2</span><br><span class="line">  <span class="built_in">timeout</span>: 10</span><br><span class="line">  </span><br><span class="line">  <span class="comment">## 注意参数和上面的logstash一样</span></span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>filebeat：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/filebeat</span><br><span class="line">./filebeat -e -c filebeat.yml &gt;&gt;logs/filebeat.log  <span class="comment">#前台启动，先前台启动一遍看有没有报错，没有的话就关闭进行后台运行</span></span><br><span class="line"><span class="built_in">nohup</span> ./filebeat -e -c filebeat.yml &gt;&gt;logs/filebeat.log &gt;/dev/null 2&gt;&amp;1 &amp;  <span class="comment">#后台启动</span></span><br></pre></td></tr></table></figure><p>logstash：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/logstash/bin/logstash -f /usr/local/logstash/config/nginx.conf <span class="comment">#前台启动，先前台启动一遍看有没有报错，没有的话就关闭进行后台运行</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/logstash/bin &amp;&amp; <span class="built_in">nohup</span> ./logstash -f /usr/local/logstash/config/nginx.conf &gt;/dev/null 2&gt;&amp;1 &amp;  <span class="comment">#后台启动</span></span><br></pre></td></tr></table></figure><p> 查看启动状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep logstash</span><br><span class="line">ps -ef | grep filebeat</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7搭建vsftpd服务</title>
      <link href="/posts/edfe6aca.html"/>
      <url>/posts/edfe6aca.html</url>
      
        <content type="html"><![CDATA[<h1 id="centos7搭建-Vsftpd-服务。"><a href="#centos7搭建-Vsftpd-服务。" class="headerlink" title="centos7搭建 Vsftpd 服务。"></a>centos7搭建 Vsftpd 服务。</h1><h6 id="安装服务端程序"><a href="#安装服务端程序" class="headerlink" title="安装服务端程序"></a>安装服务端程序</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install vsftpd</span><br><span class="line">Loaded plugins: langpacks, product-id, subscription-manager</span><br><span class="line">………………省略部分输出信息………………</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line">vsftpd x86_64 3.0.2-9.el7 rhel 166 k</span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install 1 Package</span><br><span class="line">vsftpd.x86_64 0:3.0.2-9.el7</span><br><span class="line">Complete!</span><br><span class="line"></span><br><span class="line">[root@linuxprobe ~]# yum install ftp</span><br><span class="line">Loaded plugins: langpacks, product-id, subscription-manager</span><br><span class="line">………………省略部分输出信息………………</span><br><span class="line">Install 1 Package</span><br><span class="line">ftp.x86_64 0:0.17-66.el7</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h6 id="关闭本机防火墙和禁用selinux"><a href="#关闭本机防火墙和禁用selinux" class="headerlink" title="关闭本机防火墙和禁用selinux"></a>关闭本机防火墙和禁用selinux</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">[root@localhost ~]# sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure><h6 id="配置-FTP-服务"><a href="#配置-FTP-服务" class="headerlink" title="配置 FTP 服务"></a>配置 FTP 服务</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 程序的主配置文件为/etc/vsftpd/vsftpd.conf</span><br><span class="line">[root@localhost ~]# cat /etc/vsftpd/vsftpd.conf</span><br><span class="line">anonymous_enable=YES</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=NO</span><br><span class="line">listen_ipv6=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br></pre></td></tr></table></figure><h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><p>CentOS7 中的配置文件位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主配置文件：/etc/vsftpd/vsftpd.conf</span><br><span class="line">配置文件目录：/etc/vsftpd/*.conf</span><br><span class="line">服务启动脚本：/etc/rc.d/init.d/vsftpd</span><br><span class="line">用户认证配置文件：/etc/pam.d/vsftpd</span><br></pre></td></tr></table></figure><h6 id="共享目录"><a href="#共享目录" class="headerlink" title="共享目录"></a>共享目录</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">匿名用户(映射为ftp用户)共享资源位置：/var/ftp</span><br><span class="line">系统用户通过ftp访问的资源的位置：用户自己的家目录</span><br><span class="line">虚拟用户通过ftp访问的资源的位置：给虚拟用户指定的映射成为的系统用户的家目录</span><br></pre></td></tr></table></figure><h6 id="通用基础配置"><a href="#通用基础配置" class="headerlink" title="通用基础配置"></a>通用基础配置</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">listen=[YES|NO]         #是否以独立运行的方式监听服务</span><br><span class="line">listen_address=IP地址   #设置要监听的 IP 地址</span><br><span class="line">listen_port=21        #设置 FTP 服务的监听端口</span><br><span class="line">download_enable＝[YES|NO] #是否允许下载文件</span><br><span class="line">max_clients=0   #最大客户端连接数，0 为不限制</span><br><span class="line">max_per_ip=0   #同一 IP 地址的最大连接数，0 为不限制</span><br><span class="line">chown_uploads=[YES|NO] #是否允许改变上传文件的属主</span><br><span class="line">chown_username=whoever #改变上传文件的属主为 whoever</span><br><span class="line">pam_service_name=vsftpd #让 vsftpd 使用 pam 完成用户认证，使用的文件为/etc/pam.d/vsftpd</span><br></pre></td></tr></table></figure><h6 id="匿名用户的配置"><a href="#匿名用户的配置" class="headerlink" title="匿名用户的配置"></a>匿名用户的配置</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=[YES|NO]      #是否允许匿名用户访问</span><br><span class="line">anon_upload_enable=[YES|NO]    #是否允许匿名用户上传文件</span><br><span class="line">anon_mkdir_write_enable=[YES|NO] #是否允许匿名用户创建目录</span><br><span class="line">anon_other_write_enable=[YES|NO] #是否开放匿名用户的其他写入权限（包括重命名、删除等操作权限）</span><br><span class="line">anon_umask=022       #匿名用户上传文件的 umask 值</span><br><span class="line">anon_root=/var/ftp   #匿名用户的 FTP 根目录</span><br><span class="line">anon_max_rate=0       #匿名用户的最大传输速率（字节/秒），0 为不限制</span><br></pre></td></tr></table></figure><h6 id="系统用户的配置"><a href="#系统用户的配置" class="headerlink" title="系统用户的配置"></a>系统用户的配置</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=NO    #禁止匿名访问模式</span><br><span class="line">local_enable=[YES|NO]  #是否允许本地用户登录 FTP</span><br><span class="line">write_enable=[YES|NO]  #是否开放本地用户的其他写入权限</span><br><span class="line">local_umask=022        #本地用户上传文件的 umask 值</span><br><span class="line">local_root=/var/ftp    #本地用户的 FTP 根目录</span><br><span class="line">local_max_rate=0      #本地用户最大传输速率（字节/秒），0 为不限制</span><br><span class="line">userlist_enable=[YES|NO] #开启用户作用名单文件功能</span><br><span class="line">userlist_deny=[YES|NO]   #启用禁止用户名单，名单文件为 ftpusers 和/etc/vsftpd/user_list</span><br><span class="line">chroot_local_user=[YES|NO] #是否将用户权限禁锢在 FTP 家目录中，以确保安全</span><br><span class="line">chroot_list_enable=[YES|NO] #禁锢文件中指定的 FTP 本地用户于其家目录中</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list #指定禁锢文件位置，需要和 chroot_list_enable 一同开启</span><br></pre></td></tr></table></figure><h6 id="日志功能"><a href="#日志功能" class="headerlink" title="日志功能"></a>日志功能</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xferlog_enable=[YES|NO]    #是否开启 FTP 日志功能</span><br><span class="line">xferlog_std_format=[YES|NO]    #是否以标准格式保持日志</span><br><span class="line">xferlog_file=/var/log/xferlog  #指定保存日志的文件名称，需要一同开启</span><br></pre></td></tr></table></figure><h2 id="vsftpd-认证模式"><a href="#vsftpd-认证模式" class="headerlink" title="vsftpd 认证模式"></a>vsftpd 认证模式</h2><p>vsftpd 作为更加安全的文件传输的服务程序，允许用户以三种认证模式登录到 FTP 服务器上。</p><ul><li><p>匿名开放模式</p></li><li><ul><li>匿名开放模式是一种最不安全的认证模式，任何人都可以无需密码验证而直接登录到FTP服务器。这种模式一般用来访问不重要的公开文件，在生产环境中尽量不要存放重要文件，不建议在生产环境中如此行事。</li></ul></li><li><p>本地用户模式</p></li><li><ul><li>本地用户模式是通过Linux系统本地的账户密码信息进行认证的模式，相较于匿名开放模式更安全，而且配置起来相对简单。但是如果被黑客破解了账户的信息，就可以畅通无阻地登录FTP服务器，从而完全控制整台服务器。</li></ul></li><li><p>虚拟用户模式</p></li><li><ul><li>虚拟用户模式是这三种模式中最安全的一种认证模式，它需要为FTP服务单独建立用户数据库文件，虚拟出用来进行口令验证的账户信息，而这些账户信息在服务器系统中实际上是不存在的，仅供FTP服务程序进行认证使用。这样，即使黑客破解了账户信息也无法登录服务器，从而有效降低了破坏范围和影响。</li></ul></li></ul><h3 id="匿名访问模式"><a href="#匿名访问模式" class="headerlink" title="匿名访问模式"></a>匿名访问模式</h3><p>vsftpd 服务程序默认开启了匿名开放模式，我们需要做的就是开放匿名用户的上传、下载文件的权限，以及让匿名用户创建、删除、更名文件的权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># 匿名访问模式主配置文件</span><br><span class="line">[root@localhost ~]# vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">anonymous_enable=YES</span><br><span class="line">anon_umask=022</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"></span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=NO</span><br><span class="line">listen_ipv6=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"># 重启服务</span><br><span class="line">[root@localhost ~]# systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line"># 服务程序加入到开机启动项中，以保证服务器在重启后依然能够正常提供传输服务</span><br><span class="line">[root@localhost ~]# systemctl enable vsftpd</span><br><span class="line">ln -s &#x27;/usr/lib/systemd/system/vsftpd.service&#x27; &#x27;/etc/systemd/system/multi-user.target.wants/vsftpd.service</span><br><span class="line"># 在vsftpd服务程序的匿名开放认证模式下，其账户统一为anonymous，密码为空</span><br><span class="line"># 连接到FTP服务器后，默认访问的是/var/ftp目录，我们可以在其中进行创建、删除等操作</span><br><span class="line">[root@localhost ~]# ftp 192.168.10.10</span><br><span class="line">Connected to 192.168.10.10 (192.168.10.10).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.10.10:root): anonymous</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:此处敲击回车即可</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; cd pub</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; mkdir files</span><br><span class="line">550 Permission denied.</span><br><span class="line"># 系统显示拒绝创建目录，这是为什么呢？</span><br><span class="line"># 查看该目录的权限得知，只有root管理员才有写入权限，开放ftp用户权限(该账户在系统中已经存在)</span><br><span class="line">[root@localhost ~]# ls -ld /var/ftp/pub</span><br><span class="line">drwxr-xr-x. 3 root root 16 Jul 13 14:38 /var/ftp/pub</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# chown -Rf ftp /var/ftp/pub</span><br><span class="line">[root@localhost ~]# ls -ld /var/ftp/pub</span><br><span class="line">drwxr-xr-x. 3 ftp root 16 Jul 13 14:38 /var/ftp/pub</span><br><span class="line"></span><br><span class="line">[root@linuxprobe ~]# ftp 192.168.10.10</span><br><span class="line">………………省略部分输出信息………………</span><br><span class="line">ftp&gt; mkdir files</span><br><span class="line">257 &quot;/pub/files&quot; created</span><br><span class="line">ftp&gt; rename files database</span><br><span class="line">350 Ready for RNTO.</span><br><span class="line">250 Rename successful.</span><br><span class="line">ftp&gt; exit</span><br><span class="line">221 Goodbye.</span><br></pre></td></tr></table></figure><h3 id="本地用户模式"><a href="#本地用户模式" class="headerlink" title="本地用户模式"></a>本地用户模式</h3><p>如果之前用的是匿名开放模式，现在就可以将它关了，然后开启本地用户模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># 本地用户模式主配置文件</span><br><span class="line">[root@localhost ~]# vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">anonymous_enable=NO</span><br><span class="line"></span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">listen=NO</span><br><span class="line">listen_ipv6=YES</span><br><span class="line"></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line"># 同样需要重启服务和开机自启动</span><br><span class="line">[root@localhost ~]# systemctl restart vsftpd</span><br><span class="line"></span><br><span class="line"># 服务程序加入到开机启动项中，以保证服务器在重启后依然能够正常提供传输服务</span><br><span class="line">[root@localhost ~]# systemctl enable vsftpd</span><br><span class="line">ln -s &#x27;/usr/lib/systemd/system/vsftpd.service&#x27; &#x27;/etc/systemd/system/multi-user.target.wants/vsftpd.service</span><br><span class="line"># 现在已经完全可以本地用户的身份登录FTP服务器了，但是使用root无法登陆</span><br><span class="line">[root@localhost ~]# ftp 192.168.10.10</span><br><span class="line">Connected to 192.168.10.10 (192.168.10.10).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.10.10:root): root</span><br><span class="line">530 Permission denied.</span><br><span class="line">Login failed.</span><br><span class="line">ftp&gt;</span><br><span class="line"></span><br><span class="line"># 这是因为，为了系统的安全，默认禁止root等用户登录FTP服务被系统拒绝访问</span><br><span class="line"># 因为vsftpd服务程序所在的目录中，默认存放着两个名为用户名单的文件，ftpusers和user_list</span><br><span class="line"># 在ftpusers和user_list两个用户文件中将root用户删除就可以登录了</span><br><span class="line">[root@localhost ~]# cat /etc/vsftpd/user_list</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cat /etc/vsftpd/ftpusers</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line"># 在采用本地用户模式登录FTP服务器后，默认访问的是该用户的家目录，因此不存在写入权限不足的情况</span><br><span class="line"># 如果不关闭SELinux，则需要再次开启SELinux域中对FTP服务的允许策略</span><br><span class="line">[root@localhost ~]# setsebool -P ftpd_full_access=on</span><br><span class="line"></span><br><span class="line"># 即可以使用系统用户进行FTP服务的登录了</span><br><span class="line">[root@localhost ~]# ftp 192.168.10.10</span><br><span class="line">Connected to 192.168.10.10 (192.168.10.10).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.10.10:root): escape</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:此处输入该用户的密码</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br></pre></td></tr></table></figure><h3 id="虚拟用户模式-文本文件"><a href="#虚拟用户模式-文本文件" class="headerlink" title="虚拟用户模式(文本文件)"></a>虚拟用户模式(文本文件)</h3><p>认证模式：vsftpd + pam + file</p><ul><li><h4 id="第一步：创建用于进行-FTP-认证的用户数据库文件"><a href="#第一步：创建用于进行-FTP-认证的用户数据库文件" class="headerlink" title="第一步：创建用于进行 FTP 认证的用户数据库文件"></a>第一步：创建用于进行 FTP 认证的用户数据库文件</h4></li><li><ul><li>这里使用文本文件进行用户认证</li><li>数据库文件中奇数行为账户名，偶数行为密码</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 编辑虚拟用户文件</span><br><span class="line">[root@localhost ~]# cd /etc/vsftpd/</span><br><span class="line">[root@localhost vsftpd]# vim vuser.list</span><br><span class="line">aimo1</span><br><span class="line">aimo@2021</span><br><span class="line">aimo2</span><br><span class="line">aimo@2021</span><br><span class="line"># 明文信息既不安全，也不符合让vsftpd服务程序直接加载的格式</span><br><span class="line"># 因此需要使用db_load命令用哈希算法将原始的明文信息文件转换成数据库文件</span><br><span class="line"># 降低数据库文件的权限，然后再把原始的明文信息文件删除</span><br><span class="line">[root@localhost vsftpd]# db_load -T -t hash -f vuser.list vuser.db</span><br><span class="line">[root@localhost vsftpd]# file vuser.db</span><br><span class="line">vuser.db: Berkeley DB (Hash, version 9, native byte-order)</span><br><span class="line"></span><br><span class="line">[root@localhost vsftpd]# chmod 600 vuser.db</span><br></pre></td></tr></table></figure><ul><li><h4 id="第二步：创建-vsftpd-服务程序用于存储文件的根目录以及虚拟用户映射的系统本地用户"><a href="#第二步：创建-vsftpd-服务程序用于存储文件的根目录以及虚拟用户映射的系统本地用户" class="headerlink" title="第二步：创建 vsftpd 服务程序用于存储文件的根目录以及虚拟用户映射的系统本地用户"></a>第二步：创建 vsftpd 服务程序用于存储文件的根目录以及虚拟用户映射的系统本地用户</h4></li><li><ul><li>FTP服务用于存储文件的根目录指的是，当虚拟用户登录后所访问的默认位置</li><li>可以把这个系统本地用户的家目录设置为&#x2F;var目录并设置不允许登录FTP服务器</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# useradd -d /var/ftproot -s /sbin/nologin virtual</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ls -ld /var/ftproot/</span><br><span class="line">drwx------. 3 virtual virtual 74 Jul 14 17:50 /var/ftproot/</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# chmod -Rf 755 /var/ftproot/</span><br></pre></td></tr></table></figure><ul><li><h4 id="第三步：建立支持虚拟用户的-PAM-认证文件"><a href="#第三步：建立支持虚拟用户的-PAM-认证文件" class="headerlink" title="第三步：建立支持虚拟用户的 PAM 认证文件"></a>第三步：建立支持虚拟用户的 PAM 认证文件</h4></li><li><ul><li>PAM是一种认证机制，通过一些动态链接库和统一的API把系统提供的服务与认证方式分开</li><li>PAM是可插拔认证模块，使得系统管理员可以根据需求灵活调整服务程序的不同认证方式</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 新建一个用于虚拟用户认证的PAM文件vsftpd.vu</span><br><span class="line"># PAM文件内的db=参数为使用db_load命令生成的账户密码数据库文件的路径，但不用写数据库文件的后缀</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vim /etc/pam.d/vsftpd.vu</span><br><span class="line">auth       required     pam_userdb.so    db=/etc/vsftpd/vuser</span><br><span class="line">account    required     pam_userdb.so    db=/etc/vsftpd/vuser</span><br></pre></td></tr></table></figure><ul><li><h4 id="第四步：在-vsftpd-conf-文件中添加支持配置"><a href="#第四步：在-vsftpd-conf-文件中添加支持配置" class="headerlink" title="第四步：在 vsftpd.conf 文件中添加支持配置"></a>第四步：在 vsftpd.conf 文件中添加支持配置</h4></li><li><ul><li>在vsftpd服务程序的主配置文件中默认就带有参数pam_service_name&#x3D;vsftpd</li><li>表示登录FTP服务器时是根据&#x2F;etc&#x2F;pam.d&#x2F;vsftpd文件进行安全认证的</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 我们要做的就是把vsftpd主配置文件中原有的PAM认证文件vsftpd修改为新建的vsftpd.vu文件即可</span><br><span class="line">[root@localhost ~]# vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">anonymous_enable=NO</span><br><span class="line">pam_service_name=vsftpd.vu</span><br><span class="line">user_config_dir=/etc/vsftpd/vusers_dir</span><br><span class="line"></span><br><span class="line">local_enable=YES</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=virtual</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=NO</span><br><span class="line">listen_ipv6=YES</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br></pre></td></tr></table></figure><ul><li><h4 id="第五步：为虚拟用户设置不同的权限"><a href="#第五步：为虚拟用户设置不同的权限" class="headerlink" title="第五步：为虚拟用户设置不同的权限"></a>第五步：为虚拟用户设置不同的权限</h4></li><li><ul><li>只需新建一个目录，在里面分别创建两个以aimo1和aimo2命名的文件</li><li>在每个文件中，对用户分别进行配置，达到管理不用用户权限的效果</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /etc/vsftpd/vusers_dir/</span><br><span class="line">[root@localhost ~]# cd /etc/vsftpd/vusers_dir/</span><br><span class="line"></span><br><span class="line">[root@localhost vusers_dir]# touch aimo1 aimo2</span><br><span class="line"></span><br><span class="line">[root@localhost vusers_dir]# vim aimo1</span><br><span class="line">local_root=/usr/local/vsftpd/aimo1#设置虚拟用户目录</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"></span><br><span class="line">[root@localhost vusers_dir]# vim aimo2</span><br><span class="line">local_root=/usr/local/vsftpd/aimo2</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br></pre></td></tr></table></figure><ul><li><h4 id="第六步：使用虚拟-FTP-用户访问测试"><a href="#第六步：使用虚拟-FTP-用户访问测试" class="headerlink" title="第六步：使用虚拟 FTP 用户访问测试"></a>第六步：使用虚拟 FTP 用户访问测试</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ftp 192.168.10.10</span><br><span class="line">Connected to 192.168.10.10 (192.168.10.10).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.10.10:root): lisi</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:此处输入虚拟用户的密码</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; mkdir files</span><br><span class="line">550 Permission denied.</span><br><span class="line">ftp&gt; exit</span><br><span class="line">221 Goodbye.</span><br><span class="line">[root@localhost ~]# ftp 192.168.10.10</span><br><span class="line">Connected to 192.168.10.10 (192.168.10.10).</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">Name (192.168.10.10:root): zhangsan</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:此处输入虚拟用户的密码</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; mkdir files</span><br><span class="line">257 &quot;/files&quot; created</span><br><span class="line">ftp&gt; rename files database</span><br><span class="line">350 Ready for RNTO.</span><br><span class="line">250 Rename successful.</span><br><span class="line">ftp&gt; rmdir database</span><br><span class="line">250 Remove directory operation successful.</span><br><span class="line">ftp&gt; exit</span><br><span class="line">221 Goodbye.</span><br></pre></td></tr></table></figure><p>最后重启vsftpd服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl restart vsftpd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTP服务器与客户端时间同步</title>
      <link href="/posts/d178de1c.html"/>
      <url>/posts/d178de1c.html</url>
      
        <content type="html"><![CDATA[<h3 id="操作场景"><a href="#操作场景" class="headerlink" title="操作场景"></a>操作场景</h3><p>ntpd（Network Time Protocol daemon）是 Linux 操作系统的一个守护进程，用于校正本地系统与时钟源服务器之前的时间，完整的实现了 NTP 协议。ntpd 与 ntpdate 的区别是 ntpd 是步进式的逐渐校正时间，不会出现时间跳变，而 ntpdate 是断点更新。</p><h3 id="一、公共-NTP-网络时间服务器"><a href="#一、公共-NTP-网络时间服务器" class="headerlink" title="一、公共 NTP 网络时间服务器"></a>一、公共 NTP 网络时间服务器</h3><h4 id="1-1、阿里云"><a href="#1-1、阿里云" class="headerlink" title="1.1、阿里云"></a>1.1、阿里云</h4><ul><li>阿里云: <a href="https://help.aliyun.com/document_detail/92704.html">https://help.aliyun.com/document_detail/92704.html</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server ntp1.aliyun.com</span><br><span class="line">server ntp2.aliyun.com</span><br><span class="line">server ntp3.aliyun.com</span><br><span class="line">server ntp4.aliyun.com</span><br><span class="line">server ntp5.aliyun.com</span><br><span class="line">server ntp6.aliyun.com</span><br><span class="line">server ntp7.aliyun.comCOPY</span><br></pre></td></tr></table></figure><h4 id="1-2、腾讯云"><a href="#1-2、腾讯云" class="headerlink" title="1.2、腾讯云"></a>1.2、腾讯云</h4><ul><li>腾讯云: <a href="https://cloud.tencent.com/document/product/213/30392">https://cloud.tencent.com/document/product/213/30392</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server time1.cloud.tencent.com</span><br><span class="line">server time2.cloud.tencent.com</span><br><span class="line">server time3.cloud.tencent.com</span><br><span class="line">server time4.cloud.tencent.com</span><br><span class="line">server time5.cloud.tencent.comCOPY</span><br></pre></td></tr></table></figure><h3 id="二、部署-NTP-服务"><a href="#二、部署-NTP-服务" class="headerlink" title="二、部署 NTP 服务"></a>二、部署 NTP 服务</h3><h4 id="2-1、安装-NTP-服务"><a href="#2-1、安装-NTP-服务" class="headerlink" title="2.1、安装 NTP 服务"></a>2.1、安装 NTP 服务</h4><ul><li>服务端和客户端机器都需要安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   1、安装 ntp 服务</span></span><br><span class="line">yum install ntp -y</span><br><span class="line">2、设置 ntp 开机启动</span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd.serviceCOPY</span><br></pre></td></tr></table></figure><h4 id="2-2、配置服务端"><a href="#2-2、配置服务端" class="headerlink" title="2.2、配置服务端"></a>2.2、配置服务端</h4><ul><li>需要修改 2 个地方</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   1、编辑配置文件</span></span><br><span class="line">vim /etc/ntp.conf</span><br><span class="line"><span class="comment">#   2、修改 restrict 这里修改成网段</span></span><br><span class="line">restrict 10.168.2.0 mask 255.255.255.0</span><br><span class="line"><span class="comment">#   3、修改 server 默认的全部删除 替换成以下内容</span></span><br><span class="line">server ntp1.aliyun.com</span><br><span class="line">server ntp2.aliyun.com</span><br><span class="line">server ntp3.aliyun.com</span><br><span class="line">server ntp4.aliyun.com</span><br><span class="line">server ntp5.aliyun.com</span><br><span class="line">server ntp6.aliyun.com</span><br><span class="line">server ntp7.aliyun.com</span><br></pre></td></tr></table></figure><h4 id="2-3、部署客户端"><a href="#2-3、部署客户端" class="headerlink" title="2.3、部署客户端"></a>2.3、部署客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   1、编辑配置文件</span></span><br><span class="line">vim /etc/ntp.conf</span><br><span class="line"><span class="comment">#   2、找到 server xxxx 全部删除，修改成 ntp 服务端地址</span></span><br><span class="line">server 10.168.2.0</span><br></pre></td></tr></table></figure><h4 id="2-4、启动-NTP-服务"><a href="#2-4、启动-NTP-服务" class="headerlink" title="2.4、启动 NTP 服务"></a>2.4、启动 NTP 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   1、服务端和客户端都需要执行</span></span><br><span class="line">systemctl restart ntpd</span><br><span class="line"><span class="comment">#   2、检查 ntpd 状态</span></span><br><span class="line">netstat -nupl</span><br><span class="line"><span class="comment">#   3、查看 ntpd 状态是否正常</span></span><br><span class="line">service ntpd statusCOPY</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ntp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes使用nfs作为默认存储</title>
      <link href="/posts/f1429c55.html"/>
      <url>/posts/f1429c55.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、部署-Helm-客户端"><a href="#1、部署-Helm-客户端" class="headerlink" title="1、部署 Helm 客户端"></a>1、部署 Helm 客户端</h3><p>Helm客户端下载地址：<a href="https://github.com/helm/helm/releases">https://github.com/helm/helm/releases</a></p><p>解压移动到&#x2F;usr&#x2F;bin&#x2F;目录即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://get.helm.sh/helm-v3.3.1-linux-amd64.tar.gz</span><br><span class="line">tar zxvf helm-v3.3.1-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> linux-amd64/helm /usr/bin/</span><br></pre></td></tr></table></figure><h3 id="2、命令补全"><a href="#2、命令补全" class="headerlink" title="2、命令补全"></a>2、命令补全</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装epel源</span></span><br><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install bash-completion</span><br><span class="line">helm completion bash &gt; /etc/bash_completion.d/helm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Alpine 系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bash 文档 可以不按照</span></span><br><span class="line">apk add bash-doc</span><br><span class="line"><span class="comment"># bash 自动命令补全</span></span><br><span class="line">apk add bash-completion</span><br><span class="line">helm completion bash &gt; /usr/share/bash-completion/helm</span><br></pre></td></tr></table></figure><h3 id="3、Helm常用命令"><a href="#3、Helm常用命令" class="headerlink" title="3、Helm常用命令"></a>3、Helm常用命令</h3><table><thead><tr><th><strong>命令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>create</td><td>创建一个chart并指定名字</td></tr><tr><td>dependency</td><td>管理chart依赖</td></tr><tr><td>get</td><td>下载一个release。可用子命令：all、hooks、manifest、notes、values</td></tr><tr><td>history</td><td>获取release历史</td></tr><tr><td>install</td><td>安装一个chart</td></tr><tr><td>list</td><td>列出release</td></tr><tr><td>package</td><td>将chart目录打包到chart存档文件中</td></tr><tr><td>pull</td><td>从远程仓库中下载chart并解压到本地 # helm pull stable&#x2F;mysql –untar</td></tr><tr><td>repo</td><td>添加，列出，移除，更新和索引chart仓库。可用子命令：add、index、list、remove、update</td></tr><tr><td>rollback</td><td>从之前版本回滚</td></tr><tr><td>search</td><td>根据关键字搜索chart。可用子命令：hub、repo</td></tr><tr><td>show</td><td>查看chart详细信息。可用子命令：all、chart、readme、values</td></tr><tr><td>status</td><td>显示已命名版本的状态</td></tr><tr><td>template</td><td>本地呈现模板</td></tr><tr><td>uninstall</td><td>卸载一个release</td></tr><tr><td>upgrade</td><td>更新一个release</td></tr><tr><td>version</td><td>查看helm客户端版本</td></tr></tbody></table><h3 id="4、配置国内Chart仓库"><a href="#4、配置国内Chart仓库" class="headerlink" title="4、配置国内Chart仓库"></a>4、配置国内Chart仓库</h3><ul><li>微软仓库（<a href="http://mirror.azure.cn/kubernetes/charts/%EF%BC%89%E8%BF%99%E4%B8%AA%E4%BB%93%E5%BA%93%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%EF%BC%8C%E5%9F%BA%E6%9C%AC%E4%B8%8A%E5%AE%98%E7%BD%91%E6%9C%89%E7%9A%84chart%E8%BF%99%E9%87%8C%E9%83%BD%E6%9C%89%E3%80%82">http://mirror.azure.cn/kubernetes/charts/）这个仓库强烈推荐，基本上官网有的chart这里都有。</a></li><li>阿里云仓库（<a href="https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts">https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</a> ）</li><li>官方仓库（<a href="https://hub.kubeapps.com/charts/incubator%EF%BC%89%E5%AE%98%E6%96%B9chart%E4%BB%93%E5%BA%93%EF%BC%8C%E5%9B%BD%E5%86%85%E4%BD%BF%E7%94%A8%E6%9C%89%E7%82%B9%E6%85%A2%E3%80%82">https://hub.kubeapps.com/charts/incubator）官方chart仓库，国内使用有点慢。</a></li></ul><p>添加存储库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm repo add stable http://mirror.azure.cn/kubernetes/charts</span><br><span class="line">helm repo add aliyun https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts </span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure><p>查看配置的存储库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm repo list</span><br><span class="line">helm search repo stable</span><br></pre></td></tr></table></figure><h3 id="5、部署-NFS-服务"><a href="#5、部署-NFS-服务" class="headerlink" title="5、部署 NFS 服务"></a>5、部署 NFS 服务</h3><h4 id="5-1、-安装-NFS-与-rpcbind-服务"><a href="#5-1、-安装-NFS-与-rpcbind-服务" class="headerlink" title="5.1、 安装 NFS 与 rpcbind 服务"></a>5.1、 安装 NFS 与 rpcbind 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   创建 NFS 存储目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/k8s</span><br><span class="line"><span class="comment">#   安装nfs服务</span></span><br><span class="line">yum -y install nfs-utils rpcbind</span><br><span class="line"><span class="comment">#   修改配置文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/data/NFS *(rw,sync,no_root_squash,no_subtree_check)&quot;</span> &gt; /etc/exports</span><br><span class="line"><span class="comment">#   启动服务</span></span><br><span class="line">systemctl start nfs &amp;&amp; systemctl start rpcbind</span><br><span class="line"><span class="comment">#   设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server &amp;&amp; systemctl <span class="built_in">enable</span> rpcbind</span><br></pre></td></tr></table></figure><h4 id="5-2、集群节点安装-nfs"><a href="#5-2、集群节点安装-nfs" class="headerlink" title="5.2、集群节点安装 nfs"></a>5.2、集群节点安装 nfs</h4><p>重点全部节点都需要安装 nfs-utils 安装了即可不需要配置，否则节点无法挂载 pv</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#   安装nfs服务</span><br><span class="line">yum -y install nfs-utils</span><br><span class="line"></span><br><span class="line">#在节点上测试nfs服务器上的可挂载目录</span><br><span class="line">showmount -e 10.168.3.158 ##nfs服务器地址</span><br></pre></td></tr></table></figure><h4 id="5-3、-使用-helm-安装-nfs-client-provisioner为默认存储"><a href="#5-3、-使用-helm-安装-nfs-client-provisioner为默认存储" class="headerlink" title="5.3、 使用 helm 安装 nfs-client-provisioner为默认存储"></a>5.3、 使用 helm 安装 nfs-client-provisioner为默认存储</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">helm install nfs-client-provisioner \</span><br><span class="line">  --<span class="built_in">set</span> storageClass.name=nfs-client \<span class="comment">## 存储类名</span></span><br><span class="line">  --<span class="built_in">set</span> storageClass.defaultClass=<span class="literal">true</span> \<span class="comment">## 指定为默认存储</span></span><br><span class="line">  --<span class="built_in">set</span> nfs.server=10.168.3.158 \<span class="comment">## nfs服务器地址</span></span><br><span class="line">  --<span class="built_in">set</span> nfs.path=/data/k8s \<span class="comment">## 挂载路径</span></span><br><span class="line">  stable/nfs-client-provisioner</span><br><span class="line">  </span><br><span class="line"><span class="comment">## 部署后查看存储状况</span></span><br><span class="line">[root@master3 /]<span class="comment"># kubectl get sc</span></span><br><span class="line">NAME                   PROVISIONER                            RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">nfs-client (default)   cluster.local/nfs-client-provisioner   Delete          Immediate           <span class="literal">true</span>                   17h</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim编辑器</title>
      <link href="/posts/6b8f0853.html"/>
      <url>/posts/6b8f0853.html</url>
      
        <content type="html"><![CDATA[<h5 id="4-1-Vim文本编辑器"><a href="#4-1-Vim文本编辑器" class="headerlink" title="4.1 Vim文本编辑器"></a><strong>4.1 Vim文本编辑器</strong></h5><p>Vim的发布最早可以追溯到1991年，英文全称为：“Vi IMproved”，也就是对vi编辑器的提升版本，其中最大的改进当属对代码的着色功能，亦有些编程场景能够自动修正错误代码。</p><p>每当在讲课时遇到需要让学生记住的知识点时，为了能让他们打起精神来，我都会突然提高嗓门，因此有句话他们记得尤其深刻：“<strong>在<a href="https://www.linuxprobe.com/">Linux系统</a>中一切都是文件，而配置一个服务就是在修改其配置文件的参数</strong>”。而且在日常工作中大家也肯定免不了要编写文档，这些工作都是通过文本编辑器来完成的。<a href="https://www.linuxprobe.com/">刘遄</a>老师写作本书的目的是让读者切实掌握Linux系统的运维方法，而不是仅仅停留在“会用某个操作系统”的层面上，所以我们这里选择使用Vim文本编辑器，它默认会安装在当前所有的Linux操作系统上，是一款超棒的文本编辑器。</p><p>Vim之所以能得到广大厂商与用户的认可，原因在于Vim编辑器中设置了三种模式—命令模式、末行模式和编辑模式，每种模式分别又支持多种不同的命令快捷键，这大大提高了工作效率，而且用户在习惯之后也会觉得相当顺手。要想高效率地操作文本，就必须先搞清这三种模式的操作区别以及模式之间的切换方法（见图4-1）。</p><blockquote><p>命令模式：控制光标移动，可对文本进行复制、粘贴、删除和查找等工作。</p><p>输入模式：正常的文本录入。</p><p>末行模式：保存或退出文档，以及设置编辑环境。</p></blockquote><p><img src="https://www.linuxprobe.com/wp-content/uploads/2015/03/vim%E4%B8%8D%E5%90%8C%E6%A8%A1%E5%BC%8F%E9%97%B4%E7%9A%84%E5%88%87%E6%8D%A2.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-1 Vim编辑器模式的切换方法</p><p>在每次运行Vim编辑器时，默认进入命令模式，此时需要先切换到输入模式后再进行文档编写工作，而每次在编写完文档后需要先返回命令模式，然后再进入末行模式，执行文档的保存或退出操作。在Vim中，无法直接从输入模式切换到末行模式。Vim编辑器中内置的命令有成百上千种用法，为了能够帮助读者更快地掌握Vim编辑器，表4-1总结了在命令模式中最常用的一些命令。</p><p>表4-1                          命令模式中最常用的一些命令</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>dd</td><td>删除（剪切）光标所在整行</td></tr><tr><td>5dd</td><td>删除（剪切）从光标处开始的5行</td></tr><tr><td>yy</td><td>复制光标所在整行</td></tr><tr><td>5yy</td><td>复制从光标处开始的5行</td></tr><tr><td>n</td><td>显示搜索命令定位到的下一个字符串</td></tr><tr><td>N</td><td>显示搜索命令定位到的上一个字符串</td></tr><tr><td>u</td><td>撤销上一步的操作</td></tr><tr><td>p</td><td>将之前删除（dd）或复制（yy）过的数据粘贴到光标后面</td></tr></tbody></table><p>末行模式主要用于保存或退出文件，以及设置Vim编辑器的工作环境，还可以让用户执行外部的Linux命令或跳转到所编写文档的特定行数。要想切换到末行模式，在命令模式中输入一个冒号就可以了。末行模式中常用的命令如表4-2所示。</p><p>表4-2                          末行模式中最常用的一些命令</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:q!</td><td>强制退出（放弃对文档的修改内容）</td></tr><tr><td>:wq!</td><td>强制保存退出</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>不显示行号</td></tr><tr><td>:命令</td><td>执行该命令</td></tr><tr><td>:整数</td><td>跳转到该行</td></tr><tr><td>:s&#x2F;one&#x2F;two</td><td>将当前光标所在行的第一个one替换成two</td></tr><tr><td>:s&#x2F;one&#x2F;two&#x2F;g</td><td>将当前光标所在行的所有one替换成two</td></tr><tr><td>:%s&#x2F;one&#x2F;two&#x2F;g</td><td>将全文中的所有one替换成two</td></tr><tr><td>?字符串</td><td>在文本中从下至上搜索该字符串</td></tr><tr><td>&#x2F;字符串</td><td>在文本中从上至下搜索该字符串</td></tr></tbody></table><p>编辑器平日里一定要多用，靠的就是个熟练程度，一旦把Vim的各种命令练熟，再编辑配置文件的时候能比同事快不止一倍。我记得在2011年的时候见过一个叫做Aleksandr Levchuk的极客大咖，就为了准求极致的效率感，而发起了一个叫“VIM Clutch”的实验项目，他买了一对类似于汽车油门和刹车的离合器，改装后再用USB与电脑相连接，左脚刹车是进入编辑模式（i），右脚油门是保存文件（wq!），这种对Linux和Vim的热爱真是强大。</p><h6 id="4-1-1-编写简单文档"><a href="#4-1-1-编写简单文档" class="headerlink" title="4.1.1 编写简单文档"></a><strong>4.1.1 编写简单文档</strong></h6><p>目前为止，大家已经具备了在Linux系统中编写文档的理论基础了，接下来我们一起动手编写一个简单的脚本文档。刘遄老师会尽力把所有操作步骤和按键过程都标注出来，如果忘记了某些快捷键命令的作用，可以再返回前文进行复习。</p><p>编写脚本文档的第一步就是给文档取个名字，这里将其命名为practice.txt。如果存在该文档，则是打开它。如果不存在，则是创建一个临时的输入文件，如图4-2所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E5%B0%9D%E8%AF%95%E7%BC%96%E5%86%99%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-2 尝试编写文本文档</p><p>打开practice.txt文档后，默认进入的是Vim编辑器的命令模式。此时只能执行该模式下的命令，而不能随意输入文本内容，我们需要切换到输入模式才可以编写文档。</p><p>在图4-1中提到，可以分别使用a、i、o三个键从命令模式切换到输入模式。其中，a键与i键分别是在光标后面一位和光标当前位置切换到输入模式，而o键则是在光标的下面再创建一个空行，此时可敲击a键进入到编辑器的输入模式，如图4-3所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E5%88%87%E6%8D%A2%E8%87%B3%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E8%BE%93%E5%85%A5%E6%A8%A1%E5%BC%8F-1.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-3 切换至编辑器的输入模式</p><p>进入输入模式后，可以随意输入文本内容，Vim编辑器不会把您输入的文本内容当作命令而执行，如图4-4所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E5%9C%A8%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-4 在编辑器中输入文本内容</p><p>在编写完之后，想要保存并退出，必须先敲击键盘Esc键从输入模式返回命令模式，如图4-5所示。然后再输入:wq!切换到末行模式才能完成保存退出操作，如图4-6所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E5%88%87%E6%8D%A2%E8%87%B3%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-5 切换至编辑器的命令模式</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E5%88%87%E6%8D%A2%E8%87%B3%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E6%9C%AB%E8%A1%8C%E6%A8%A1%E5%BC%8F.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-6 切换至编辑器的末行模式</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a><strong>Tips</strong></h3><p>同学们仔细观察图4-4、4-5、4-6中左下角的提示信息，不同模式下有不同的提示字样。</p><p>当在末行模式中输入:wq!命令时，就意味着强制保存并退出文档。然后便可以用cat命令查看保存后的文档内容了，如图4-7所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E6%9F%A5%E7%9C%8B%E6%96%87%E6%A1%A3%E7%9A%84%E5%86%85%E5%AE%B9.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-7 查看文档的内容</p><p>是不是很简单？！继续编辑这个文档。因为要在原有文本内容的下面追加内容，所以在命令模式中敲击o键进入输入模式更会高效，操作如图4-8、图4-9与图4-10所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E5%86%8D%E6%AC%A1%E9%80%9A%E8%BF%87Vim%E7%BC%96%E8%BE%91%E5%99%A8%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-8 再次通过Vim编辑器编写文档</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E8%BF%9B%E5%85%A5Vim%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E8%BE%93%E5%85%A5%E6%A8%A1%E5%BC%8F.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-9 进入Vim编辑器的输入模式</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E8%BF%BD%E5%8A%A0%E5%86%99%E5%85%A5%E4%B8%80%E8%A1%8C%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-10 追加写入一行文本内容</p><p>因为此时已经修改了文本内容，所以Vim编辑器在尝试直接退出文档而不保存的时候就会拒绝我们的操作了。此时只能强制退出才能结束本次输入操作，如图4-11、图4-12和图4-13所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E9%80%80%E5%87%BA%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-11 退出文本编辑器</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E5%9B%A0%E6%96%87%E4%BB%B6%E5%B7%B2%E8%A2%AB%E4%BF%AE%E6%94%B9%E8%80%8C%E6%8B%92%E7%BB%9D%E9%80%80%E5%87%BA%E6%93%8D%E4%BD%9C.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-12 因文件已被修改而拒绝退出操作</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E5%BC%BA%E5%88%B6%E9%80%80%E5%87%BA%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-13  强制退出文本编辑器</p><p>现在大家也算是具有了一些Vim编辑器的实战经验了，应该也感觉没有想象中那么难吧。现在查看文本的内容，果然发现追加输入的内容并没有被保存下来，如图4-14所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E6%9F%A5%E7%9C%8B%E6%9C%80%E7%BB%88%E7%BC%96%E5%86%99%E6%88%90%E7%9A%84%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-14  查看最终编写成的文本内容</p><p>大家在学完了理论知识之后又自己动手编写了一个文本，现在是否感觉成就满满呢？接下来将会由浅入深为读者安排三个小任务。为了彻底掌握Vim编辑器的使用，大家一定要逐个完成不许偷懒，如果在完成这三个任务期间忘记了相关命令，可返回前文进一步复习掌握。</p><h3 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a><strong>Tips</strong></h3><p>下面实验做不成功很正常，请把重心放到Vim编辑器上面，配置文件能修改成功就很棒啦~</p><h6 id="4-1-2-配置主机名称"><a href="#4-1-2-配置主机名称" class="headerlink" title="4.1.2 配置主机名称"></a><strong>4.1.2 配置主机名称</strong></h6><p>为了便于在局域网中查找某台特定的主机，或者对主机进行区分，除了要有IP地址外，还要为主机配置一个主机名，主机之间可以通过这个类似于域名的名称来相互访问。在Linux系统中，主机名大多保存在&#x2F;etc&#x2F;hostname文件中，接下来将配置文件的内容修改为“linuxprobe.com”，步骤如下。</p><blockquote><p><strong>第1步</strong>：使用Vim编辑器修改“&#x2F;etc&#x2F;hostname”主机名称文件。</p><p><strong>第2步</strong>：把原始主机名称删除后追加“linuxprobe.com”。注意，使用Vim编辑器修改主机名称文件后，要在末行模式下执行:wq!命令才能保存并退出文档。</p><p><strong>第3步</strong>：保存并退出文档，然后使用hostname命令检查是否修改成功。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim /etc/hostname</span><br><span class="line">linuxprobe.com</span><br></pre></td></tr></table></figure><p>hostname命令用于查看当前的主机名称，但有时主机名称的改变不会立即同步到系统中，所以如果发现修改完成后还显示原来的主机名称，可重启虚拟机后再行查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# hostname</span><br><span class="line">linuxprobe.com</span><br></pre></td></tr></table></figure><h6 id="4-1-3-配置网卡信息"><a href="#4-1-3-配置网卡信息" class="headerlink" title="4.1.3 配置网卡信息"></a><strong>4.1.3 配置网卡信息</strong></h6><p>网卡IP地址配置的是否正确是两台服务器是否可以相互通信的前提。在Linux系统中，一切都是文件，因此配置网络服务的工作其实就是在编辑网卡配置文件，这个小任务不仅可以帮助您练习使用Vim编辑器，而且也为后面学习Linux中的各种服务配置打下了坚实的基础。当认真学习完本书后，一定会特别有成就感，因为本书前面的基础部分非常扎实，而后面内容则具有几乎一致的网卡IP地址和运行环境，从而确保您全身心地投入到各类服务程序的学习上，而不用操心系统环境的问题。</p><p>如果您具备一定的运维经验或者熟悉早期的Linux系统，则在学习本书时会遇到一些不容易接受的差异变化。在RHEL 5、RHEL 6中，网卡配置文件的前缀为eth，第1块网卡为eth0，第2块网卡为eth1；以此类推。而在RHEL 7中，网卡配置文件的前缀则以ifcfg开始，加上网卡名称共同组成了网卡配置文件的名字，例如ifcfg-eno16777736；而在RHEL 8中，网卡配置文件的前缀依然为ifcfg，区别是名称改成了类似于ens160的样子，不过好在除了文件名变化外网卡参数没有其他大的区别。</p><p>现在有一个名称为ifcfg-ens160的网卡设备，将其配置为开机自启动，并且IP地址、子网、网关等信息由人工指定，其步骤应该如下所示。</p><p><strong>第1步</strong>：首先切换到&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts目录中（存放着网卡的配置文件）。</p><p><strong>第2步</strong>：使用Vim编辑器修改网卡文件ifcfg-ens160，逐项写入下面的配置参数并保存退出。由于每台设备的硬件及架构是不一样的，因此请读者使用ifconfig命令自行确认各自网卡的默认名称。</p><blockquote><p>设备类型：TYPE&#x3D;Ethernet</p><p>地址分配模式：BOOTPROTO&#x3D;static</p><p>网卡名称：NAME&#x3D;ens160</p><p>是否启动：ONBOOT&#x3D;yes</p><p>IP地址：IPADDR&#x3D;192.168.10.10</p><p>子网掩码：NETMASK&#x3D;255.255.255.0</p><p>网关地址：GATEWAY&#x3D;192.168.10.1</p><p>DNS地址：DNS1&#x3D;192.168.10.1</p></blockquote><p><strong>第3步</strong>：重启网络服务并测试网络是否联通。</p><p>好的，正式开干！</p><p>进入到网卡配置文件所在的目录，然后编辑网卡配置文件，在其中填入下面的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# cd /etc/sysconfig/network-scripts/</span><br><span class="line">[root@linuxprobe network-scripts]# vim ifcfg-ens160</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NAME=ens160</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.10.10</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.10.1</span><br><span class="line">DNS1=192.168.10.1</span><br></pre></td></tr></table></figure><p>执行重启网卡设备的命令，然后通过ping命令测试网络能否联通。由于在Linux系统中ping命令不会自动终止，因此需要手动按下Ctrl-c键来强行结束进程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe network-scripts]# nmcli connection reload ens160</span><br><span class="line">[root@linuxprobe network-scripts]# ping 192.168.10.10</span><br><span class="line">PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.083 ms</span><br><span class="line">64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.110 ms</span><br><span class="line">64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.106 ms</span><br><span class="line">64 bytes from 192.168.10.10: icmp_seq=4 ttl=64 time=0.035 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.10.10 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 84ms</span><br><span class="line">rtt min/avg/max/mdev = 0.035/0.083/0.110/0.031 ms</span><br><span class="line">[root@linuxprobe network-scripts]# </span><br></pre></td></tr></table></figure><p>是不是感觉很有意思~当然如果这个实验失败也不用气馁，后面会有章节专门讲解，把关注点继续放回到Vim编辑器上吧。</p><h6 id="4-1-4-配置软件仓库"><a href="#4-1-4-配置软件仓库" class="headerlink" title="4.1.4 配置软件仓库"></a><strong>4.1.4 配置软件仓库</strong></h6><p>本书前面讲到，软件仓库的作用是为了进一步简化RPM管理软件的难度以及自动分析所需软件包及其依赖关系的技术。可以把Yum或dnf想象成是一个硕大的软件仓库，里面保存有几乎所有常用的工具，而且只需要说出所需的软件包名称，系统就会自动为您搞定一切。</p><p>既然要使用软件仓库，就要先把它搭建起来，然后将其配置规则确定好才行。鉴于第6章才会讲解Linux的存储结构和设备挂载操作，所以当前还是将重心放到Vim编辑器的学习上。如果遇到看不懂的参数也不要紧，后面章节会单独讲解。</p><p>Yum与dnf软件仓库的配置文件是通用的，也就是说填写好来配置文件信息后，这两个命令都是可以正常使用。建议在8版本系统中使用dnf作为软件的安装命令，具备更高的效率，以及支持多线程同时安装软件的优势。</p><p>搭建并配置软件仓库的大致步骤如下所示。</p><p><strong>第1步</strong>：进入到&#x2F;etc&#x2F;yum.repos.d&#x2F;目录中（因为该目录存放着软件仓库的配置文件）。</p><p><strong>第2步</strong>：使用Vim编辑器创建一个名为rhel8.repo的新配置文件（文件名称可随意，但后缀必须为.repo），逐项写入下面的配置参数并保存退出。</p><blockquote><p>仓库名称：具有唯一性的标识名称，不应与其他软件仓库发生冲突。</p><p>描述信息（name）：可以是一些介绍词，易于识别软件仓库的用处。</p><p>仓库位置（baseurl）：即软件包的获取方式，可以使用FTP、HTTP与本地file。</p><p>是否启用（enabled）：设置此源是否被使用，1为使用，0为禁用。</p><p>是否检查（gpgcheck）：设置此源是否被校验，1为校验，0为禁用。</p><p>公钥位置（gpgkey）：若上面参数开启了校验功能，则此处为公钥文件位置。若没有开启，此省略不写。</p></blockquote><p><strong>第3步</strong>：按配置参数中所填写的仓库位置挂载光盘，并把光盘挂载信息写入到&#x2F;etc&#x2F;fstab文件中。</p><p><strong>第4步</strong>：使用“dnf install httpd -y”命令检查软件仓库是否已经可用。</p><p>开始实战！</p><p>进入&#x2F;etc&#x2F;yum.repos.d目录中后创建软件仓库的配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# cd /etc/yum.repos.d/</span><br><span class="line">[root@linuxprobe yum.repos.d]# vim rhel8.repo</span><br><span class="line">[BaseOS]</span><br><span class="line">name=BaseOS</span><br><span class="line">baseurl=file:///media/cdrom/BaseOS</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">[AppStream]</span><br><span class="line">name=AppStream</span><br><span class="line">baseurl=file:///media/cdrom/AppStream</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><p>创建挂载点后进行挂载操作，并设置成开机自动挂载（详见第6章）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe yum.repos.d]# mkdir -p /media/cdrom </span><br><span class="line">[root@linuxprobe yum.repos.d]# mount /dev/cdrom /media/cdrom</span><br><span class="line">mount: /media/cdrom: WARNING: device write-protected, mounted read-only.</span><br><span class="line">[root@linuxprobe yum.repos.d]# vim /etc/fstab</span><br><span class="line">/dev/cdrom /media/cdrom iso9660 defaults 0 0</span><br></pre></td></tr></table></figure><p>尝试使用软件仓库的dnf命令来安装Web服务，软件包名称叫做httpd，安装后出现**Complete!**则代表配置正确：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# dnf install httpd -y</span><br><span class="line">Updating Subscription Management repositories.</span><br><span class="line">Unable to read consumer identity</span><br><span class="line">This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.</span><br><span class="line">AppStream 3.1 MB/s | 3.2 kB 00:00</span><br><span class="line">BaseOS 2.7 MB/s | 2.7 kB 00:00</span><br><span class="line">Dependencies resolved.</span><br><span class="line">………………省略部分输出信息………………</span><br><span class="line">Installed:</span><br><span class="line">httpd-2.4.37-10.module+el8+2764+7127e69e.x86_64</span><br><span class="line">apr-util-bdb-1.6.1-6.el8.x86_64</span><br><span class="line">apr-util-openssl-1.6.1-6.el8.x86_64</span><br><span class="line">apr-1.6.3-9.el8.x86_64</span><br><span class="line">apr-util-1.6.1-6.el8.x86_64</span><br><span class="line">httpd-filesystem-2.4.37-10.module+el8+2764+7127e69e.noarch</span><br><span class="line">httpd-tools-2.4.37-10.module+el8+2764+7127e69e.x86_64</span><br><span class="line">mod_http2-1.11.3-1.module+el8+2443+605475b7.x86_64</span><br><span class="line">redhat-logos-httpd-80.7-1.el8.noarch</span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><p>对于习惯使用yum命令来安装软件的同学，不需要有压力，因为您依然可以使用yum install httpd来安装软件，只是将dnf替换成yum即可，RHEL 8版本很好的兼容了用户习惯~</p><h5 id="4-2-编写Shell脚本"><a href="#4-2-编写Shell脚本" class="headerlink" title="4.2 编写Shell脚本"></a><strong>4.2 编写Shell脚本</strong></h5><p>可以将Shell终端解释器当作人与计算机硬件之间的“翻译官”，它作为用户与Linux系统内部的通信媒介，除了能够支持各种变量与参数外，还提供了诸如循环、分支等高级编程语言才有的控制结构特性。要想正确使用Shell中的这些功能特性，准确下达命令尤为重要。Shell脚本命令的工作方式有两种：交互式和批处理。</p><blockquote><p>交互式（Interactive）：用户每输入一条命令就立即执行。</p><p>批处理（Batch）：由用户事先编写好一个完整的Shell脚本，Shell会一次性执行脚本中诸多的命令。</p></blockquote><p>在Shell脚本中不仅会用到前面学习过的很多Linux命令以及正则表达式、管道符、数据流重定向等语法规则，还需要把内部功能模块化后通过逻辑语句进行处理，最终形成日常所见的Shell脚本。</p><p>查看SHELL变量可以发现当前系统已经默认使用Bash作为命令行终端解释器了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# echo $SHELL</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><h6 id="4-2-1-编写简单的脚本"><a href="#4-2-1-编写简单的脚本" class="headerlink" title="4.2.1 编写简单的脚本"></a><strong>4.2.1 编写简单的脚本</strong></h6><p>估计读者在看完上文中有关Shell脚本的复杂描述后，会累觉不爱吧。但是，上文指的是一个高级Shell脚本的编写原则，其实使用Vim编辑器把Linux命令按照顺序依次写入到一个文件中，这就是一个简单的脚本了。</p><p>例如，如果想查看当前所在工作路径并列出当前目录下所有的文件及属性信息，实现这个功能的脚本应该类似于下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim example.sh</span><br><span class="line">#!/bin/bash </span><br><span class="line">#For Example BY linuxprobe.com </span><br><span class="line">pwd </span><br><span class="line">ls -al</span><br></pre></td></tr></table></figure><p>Shell脚本文件的名称可以任意，但为了避免被误以为是普通文件，建议将.sh后缀加上，以表示是一个脚本文件。</p><p>在上面的这个example.sh脚本中实际上出现了三种不同的元素：第一行的脚本声明（#!）用来告诉系统使用哪种Shell解释器来执行该脚本；第二行的注释信息（#）是对脚本功能和某些命令的介绍信息，使得自己或他人在日后看到这个脚本内容时，可以快速知道该脚本的作用或一些警告信息；第三、四行的可执行语句也就是我们平时执行的Linux命令了。什么？！你们不相信这么简单就编写出来了一个脚本程序，来执行一下看看结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# bash example.sh</span><br><span class="line">/root</span><br><span class="line">total 60</span><br><span class="line">dr-xr-x---. 15 root root  4096 Oct 12 00:41 .</span><br><span class="line">dr-xr-xr-x. 17 root root   224 Jul 21 05:04 ..</span><br><span class="line">-rw-------.  1 root root  1407 Jul 21 05:09 anaconda-ks.cfg</span><br><span class="line">-rw-------.  1 root root   335 Jul 24 06:33 .bash_history</span><br><span class="line">-rw-r--r--.  1 root root    18 Aug 13  2018 .bash_logout</span><br><span class="line">-rw-r--r--.  1 root root   176 Aug 13  2018 .bash_profile</span><br><span class="line">………………省略部分输出信息………………</span><br></pre></td></tr></table></figure><p>除了上面用bash解释器命令直接运行Shell脚本文件外，第二种运行脚本程序的方法是通过输入完整路径的方式来执行。但默认会因为权限不足而提示报错信息，此时只需要为脚本文件增加执行权限即可（详见第5章）。初次学习Linux系统的读者不用心急，等下一章学完用户身份和权限后再来做这个实验也不迟：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# ./example.sh</span><br><span class="line">bash: ./Example.sh: Permission denied</span><br><span class="line">[root@linuxprobe ~]# chmod u+x example.sh</span><br><span class="line">[root@linuxprobe ~]# ./example.sh</span><br><span class="line">/root</span><br><span class="line">total 60</span><br><span class="line">dr-xr-x---. 15 root root  4096 Oct 12 00:41 .</span><br><span class="line">dr-xr-xr-x. 17 root root   224 Jul 21 05:04 ..</span><br><span class="line">-rw-------.  1 root root  1407 Jul 21 05:09 anaconda-ks.cfg</span><br><span class="line">-rw-------.  1 root root   335 Jul 24 06:33 .bash_history</span><br><span class="line">-rw-r--r--.  1 root root    18 Aug 13  2018 .bash_logout</span><br><span class="line">-rw-r--r--.  1 root root   176 Aug 13  2018 .bash_profile</span><br><span class="line">………………省略部分输出信息………………</span><br></pre></td></tr></table></figure><h6 id="4-2-2-接收用户的参数"><a href="#4-2-2-接收用户的参数" class="headerlink" title="4.2.2 接收用户的参数"></a><strong>4.2.2 接收用户的参数</strong></h6><p>但是，像上面这样的脚本程序只能执行一些预先定义好的功能，未免太过死板了。为了让Shell脚本程序更好地满足用户的一些实时需求，以便灵活完成工作，必须要让脚本程序能够像之前执行命令时那样，接收用户输入的参数。</p><p>比如当用户执行某一个命令，加或不加参数的输出结果也是不同的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# wc -l anaconda-ks.cfg </span><br><span class="line">44 anaconda-ks.cfg</span><br><span class="line">[root@linuxprobe ~]# wc -c anaconda-ks.cfg </span><br><span class="line">1407 anaconda-ks.cfg</span><br><span class="line">[root@linuxprobe ~]# wc -w anaconda-ks.cfg </span><br><span class="line">121 anaconda-ks.cfg</span><br></pre></td></tr></table></figure><p>这意味着命令不仅要能接收用户输入的内容，还要有能力进行判断区别，根据不同的输入调用不同的功能。</p><p>其实，Linux系统中的Shell脚本语言早就考虑到了这些，已经内设了用于接收参数的变量，变量之间使用空格间隔。例如$0对应的是当前Shell脚本程序的名称，$#对应的是总共有几个参数，$*对应的是所有位置的参数值，$?对应的是显示上一次命令的执行返回值，而$1、$2、$3……则分别对应着第N个位置的参数值，如图4-15所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2015/07/Shell%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E4%BD%8D%E7%BD%AE%E5%8F%98%E9%87%8F.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-15 Shell脚本程序中的参数位置变量</p><p>理论过后再来练习一下。尝试编写一个脚本程序示例，通过引用上面的变量参数来看下真实效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim example.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;当前脚本名称为$0&quot;</span><br><span class="line">echo &quot;总共有$#个参数，分别是$*。&quot;</span><br><span class="line">echo &quot;第1个参数为$1，第5个为$5。&quot;</span><br><span class="line">[root@linuxprobe ~]# bash example.sh one two three four five six</span><br><span class="line">当前脚本名称为example.sh</span><br><span class="line">总共有6个参数，分别是one two three four five six。</span><br><span class="line">第1个参数为one，第5个为five。</span><br></pre></td></tr></table></figure><h6 id="4-2-3-判断用户的参数"><a href="#4-2-3-判断用户的参数" class="headerlink" title="4.2.3 判断用户的参数"></a><strong>4.2.3 判断用户的参数</strong></h6><p>学习是一个登堂入室、由浅入深的过程。在学习完Linux命令、掌握Shell脚本语法变量和接收用户输入的信息之后，就要踏上新的高度—能够进一步处理接收到的用户参数。</p><p>在本书前面章节中讲到，系统在执行mkdir命令时会判断用户输入的信息，即判断用户指定的文件夹名称是否已经存在，如果存在则提示报错；反之则自动创建。Shell脚本中的条件测试语法可以判断表达式是否成立，若条件成立则返回数字0，否则便返回非零值。条件测试语法的执行格式如图4-16所示。切记，条件表达式两边均应有一个空格。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2015/07/%E6%B5%8B%E8%AF%95%E8%AF%AD%E5%8F%A5%E6%A0%BC%E5%BC%8F.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-16 条件测试语句的执行格式</p><hr><p>按照测试对象来划分，条件测试语句可以分为4种：</p><blockquote><p>文件测试语句；</p><p>逻辑测试语句；</p><p>整数值比较语句；</p><p>字符串比较语句。</p></blockquote><p>文件测试即使用指定条件来判断文件是否存在或权限是否满足等情况的运算符，具体的参数如表4-3所示。</p><p>表4-3                          文件测试所用的参数</p><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>-d</td><td>测试文件是否为目录类型</td></tr><tr><td>-e</td><td>测试文件是否存在</td></tr><tr><td>-f</td><td>判断是否为一般文件</td></tr><tr><td>-r</td><td>测试当前用户是否有权限读取</td></tr><tr><td>-w</td><td>测试当前用户是否有权限写入</td></tr><tr><td>-x</td><td>测试当前用户是否有权限执行</td></tr></tbody></table><p>下面使用文件测试语句来判断&#x2F;etc&#x2F;fstab是否为一个目录类型的文件，然后通过Shell解释器的内设$?变量显示上一条命令执行后的返回值。如果返回值为0，则目录存在；如果返回值为非零的值，则意味着它不是目录，或这个目录不存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# [ -d /etc/fstab ]</span><br><span class="line">[root@linuxprobe ~]# echo $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>再使用文件测试语句来判断&#x2F;etc&#x2F;fstab是否为一般文件，如果返回值为0，则代表文件存在，且为一般文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# [ -f /etc/fstab ]</span><br><span class="line">[root@linuxprobe ~]# echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>判断与查询一定要敲两次命令吗？其实可以一次性搞定。</p><p>逻辑语句用于对测试结果进行逻辑分析，根据测试结果可实现不同的效果。例如在Shell终端中逻辑“与”的运算符号是&amp;&amp;，它表示当前面的命令执行成功后才会执行它后面的命令，因此可以用来判断&#x2F;dev&#x2F;cdrom文件是否存在，若存在则输出Exist字样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# [ -e /dev/cdrom ] &amp;&amp; echo &quot;Exist&quot;</span><br><span class="line">Exist</span><br></pre></td></tr></table></figure><p>除了逻辑“与”外，还有逻辑“或”，它在Linux系统中的运算符号为||，表示当前面的命令执行失败后才会执行它后面的命令，因此可以用来结合系统环境变量USER来判断当前登录的用户是否为非管理员身份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# echo $USER</span><br><span class="line">root</span><br><span class="line">[root@linuxprobe ~]# [ $USER = root ] || echo &quot;user&quot;</span><br><span class="line">[root@linuxprobe ~]# su - linuxprobe </span><br><span class="line">[linuxprobe@linuxprobe ~]$ [ $USER = root ] || echo &quot;user&quot;</span><br><span class="line">user</span><br></pre></td></tr></table></figure><p>第三种逻辑语句是“非”，在Linux系统中的运算符号是一个叹号（！），它表示把条件测试中的判断结果取相反值。也就是说，如果原本测试的结果是正确的，则将其变成错误的；原本测试错误的结果则将其变成正确的。</p><p>我们现在切换回到root管理员身份，再判断当前用户是否为一个非管理员的用户。由于判断结果因为两次否定而变成正确，因此会正常地输出预设信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[linuxprobe@linuxprobe ~]$ exit</span><br><span class="line">logout</span><br><span class="line">[root@linuxprobe ~]# [ ! $USER = root ] || echo &quot;administrator&quot;</span><br><span class="line">administrator</span><br></pre></td></tr></table></figure><p>叹号应该加到判断语句的前面，代表对整个的测试语句进行取反值操作，不应该写成“$USER !&#x3D; root”，因为!&#x3D;代表的是不等于符号≠，所以虽然执行效果一样，但缺少了逻辑关系，这点还是要打好基础的。</p><h3 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips"></a><strong>Tips</strong></h3><p>&amp;&amp;是逻辑“与”，只有当前面语句执行成功的时候才会执行后面的命令。</p><p>||是逻辑“或”，只有当前面语句执行失败的时候才会执行后面的命令。</p><p>!是逻辑“非”，代表对逻辑测试结果取反值，之前是正确则变错误，错误则变正确。</p><p>就技术图书的写作来讲，一般有两种套路：让读者真正搞懂技术了；让读者觉得自己搞懂技术了。因此市面上很多浅显的图书会让读者在学完之后感觉进步特别快，这基本上是作者有意为之，目的就是让您觉得“图书很有料，自己收获很大”，但是在步入工作岗位后就露出短板吃大亏。所以刘遄老师决定继续提高难度，为读者增加一个综合的示例，一方面作为前述知识的总结，另一方面帮助读者夯实基础，能够在今后工作中更灵活地使用逻辑符号。</p><p>当前我们正在登录的即为管理员用户——root。下面这个示例的执行顺序是，先判断当前登录用户的USER变量名称是否等于root，然后用逻辑运算符“非”进行取反操作，效果就变成了判断当前登录的用户是否为非管理员用户了。最后若条件成立则会根据逻辑“与”运算符输出user字样；或条件不满足则会通过逻辑“或”运算符输出root字样，而如果前面的&amp;&amp;不成立才会执行后面的||符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# [ ! $USER = root ] &amp;&amp; echo &quot;user&quot; || echo &quot;root&quot;</span><br><span class="line">root</span><br></pre></td></tr></table></figure><hr><p>整数比较运算符仅是对数字的操作，不能将数字与字符串、文件等内容一起操作，而且不能想当然地使用日常生活中的等号、大于号、小于号等来判断。因为等号与赋值命令符冲突，大于号和小于号分别与输出重定向命令符和输入重定向命令符冲突。因此一定要使用规范的整数比较运算符来进行操作。可用的整数比较运算符如表4-4所示。</p><p>表4-4                         可用的整数比较运算符</p><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>-eq</td><td>是否等于</td></tr><tr><td>-ne</td><td>是否不等于</td></tr><tr><td>-gt</td><td>是否大于</td></tr><tr><td>-lt</td><td>是否小于</td></tr><tr><td>-le</td><td>是否等于或小于</td></tr><tr><td>-ge</td><td>是否大于或等于</td></tr></tbody></table><p>接下来小试牛刀。先测试一下10是否大于10以及10是否等于10（通过输出的返回值内容来判断）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# [ 10 -gt 10 ]</span><br><span class="line">[root@linuxprobe ~]# echo $?</span><br><span class="line">1</span><br><span class="line">[root@linuxprobe ~]# [ 10 -eq 10 ]</span><br><span class="line">[root@linuxprobe ~]# echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>在2.4节曾经讲过free命令，它能够用来获取当前系统正在使用及可用的内存量信息。接下来先使用free -m命令查看内存使用量情况（单位为MB），然后通过grep Mem:命令过滤出剩余内存量的行，再用awk ‘{print $4}’命令只保留第四列，这个演示确实有些难度，但看懂后会觉得很有意思，没准在运维工作中也会用得上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1966        1374         128          16         463         397</span><br><span class="line">Swap:          2047          66        1981</span><br><span class="line">[root@linuxprobe ~]# free -m | grep Mem:</span><br><span class="line">Mem:           1966        1374         128          16         463         397</span><br><span class="line">[root@linuxprobe ~]# free -m | grep Mem: | awk &#x27;&#123;print $4&#125;&#x27;</span><br><span class="line">128</span><br></pre></td></tr></table></figure><p>如果以后想把这个命令写入到Shell脚本里，那么建议把输出结果赋值给一个变量，这样方便其他命令进行调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# FreeMem=`free -m | grep Mem: | awk &#x27;&#123;print $4&#125;&#x27;`</span><br><span class="line">[root@linuxprobe ~]# echo $FreeMem </span><br><span class="line">128</span><br></pre></td></tr></table></figure><p>上面用于获取内存可用量的命令以及步骤可能有些“超纲”了，如果不能理解领会也不用担心，接下来才是重点。我们使用整数运算符来判断内存可用量的值是否小于1024，若小于则会提示“Insufficient Memory”（内存不足）的字样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# [ $FreeMem -lt 1024 ] &amp;&amp; echo &quot;Insufficient Memory&quot;</span><br><span class="line">Insufficient Memory</span><br></pre></td></tr></table></figure><p>字符串比较语句用于判断测试字符串是否为空值，或两个字符串是否相同。它经常用来判断某个变量是否未被定义（即内容为空值），理解起来也比较简单。字符串比较中常见的运算符如表4-5所示。</p><p>表4-5                        常见的字符串比较运算符</p><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>&#x3D;</td><td>比较字符串内容是否相同</td></tr><tr><td>!&#x3D;</td><td>比较字符串内容是否不同</td></tr><tr><td>-z</td><td>判断字符串内容是否为空</td></tr></tbody></table><p>接下来通过判断String变量是否为空值，进而判断是否定义了这个变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# [ -z $String ]</span><br><span class="line">[root@linuxprobe ~]# echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>再尝试引入逻辑运算符来试一下。当用于保存当前语系的环境变量值LANG不是英语（en.US）时，则会满足逻辑测试条件并输出“Not en.US”（非英语）的字样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# echo $LANG</span><br><span class="line">en_US.UTF-8</span><br><span class="line">[root@linuxprobe ~]# [ ! $LANG = &quot;en.US&quot; ] &amp;&amp; echo &quot;Not en.US&quot;</span><br><span class="line">Not en.US</span><br></pre></td></tr></table></figure><p><strong>出现问题?大胆提问!</strong></p><blockquote><p>因读者们硬件不同或操作错误都可能导致实验配置出错，请耐心再仔细看看操作步骤吧，不要气馁~</p><p>Linux技术交流学习请加读者群（<strong>推荐</strong>）：<a href="https://www.linuxprobe.com/club">https://www.linuxprobe.com/club</a></p><p>*本群特色：确保每一位群友都是《Linux就该这么学》的读者，答疑更有针对性，不定期领取定制礼品。</p></blockquote><h5 id="4-3-流程控制语句"><a href="#4-3-流程控制语句" class="headerlink" title="4.3 流程控制语句"></a><strong>4.3 流程控制语句</strong></h5><p>尽管此时可以通过使用Linux命令、管道符、重定向以及条件测试语句来编写最基本的Shell脚本，但是这种脚本并不适用于生产环境。原因是它不能根据真实的工作需求来调整具体的执行命令，也不能根据某些条件实现自动循环执行，通俗来讲——不能根据实际情况做出调整。</p><p>通常脚本都是从上至下一股脑的执行，效率是效率，但一旦某条命令执行失败了，那后面的功能全都会受到影响。假如有一天遇到了心仪的 他（她），心中默默的规划如下：</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/Shell%E8%84%9A%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE-2.jpg" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>结果可能见面聊天后就觉得不合适了，后续的一起吃饭和看电影就要停止行动，转而去做其他事情，因此需要判断语句帮助完成。</p><p>接下来我们通过if、for、while、case这4种流程控制语句来学习编写难度更大、功能更强的Shell脚本。为了保证下文的实用性和趣味性，做到寓教于乐，我会尽可能多地讲解各种不同功能的Shell脚本示例，而不是逮住一个脚本不放，在它原有内容的基础上修修补补。尽管这种修补式的示例教学也可以让读者明白理论知识，但是却无法开放思路，不利于日后的工作。</p><h6 id="4-3-1-if条件测试语句"><a href="#4-3-1-if条件测试语句" class="headerlink" title="4.3.1 if条件测试语句"></a><strong>4.3.1 if条件测试语句</strong></h6><p>if条件测试语句可以让脚本根据实际情况自动执行相应的命令。从技术角度来讲，if语句分为单分支结构、双分支结构、多分支结构；其复杂度随着灵活度一起逐级上升。</p><p>if条件语句的单分支结构由if、then、fi关键词组成，而且只在条件成立后才执行预设的命令，相当于口语的“如果……那么……”。单分支的if语句属于最简单的一种条件判断结构，语法格式如图4-17所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E5%8D%95%E5%88%86%E6%94%AF%E7%9A%84if%E8%AF%AD%E5%8F%A5.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-17 单分支的if条件语句</p><p>使用单分支的if条件语句来判断&#x2F;media&#x2F;cdrom目录是否存在，若不存在就创建这个目录，反之则结束条件判断和整个Shell脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim mkcdrom.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">DIR=&quot;/media/cdrom&quot;</span><br><span class="line">if [ ! -d $DIR ]</span><br><span class="line">then    </span><br><span class="line">        mkdir -p $DIR</span><br><span class="line">fi </span><br></pre></td></tr></table></figure><p>由于第5章才讲解用户身份与权限，因此这里继续用“bash 脚本名称”的方式来执行脚本。在正常情况下，顺利执行完脚本文件后没有任何输出信息，但是可以使用ls命令验证&#x2F;media&#x2F;cdrom目录是否已经成功创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# bash mkcdrom.sh</span><br><span class="line">[root@linuxprobe ~]# ls -ld /media/cdrom</span><br><span class="line">drwxr-xr-x. 2 root root 6 Oct 13 21:34 /media/cdrom</span><br></pre></td></tr></table></figure><hr><p>if条件语句的双分支结构由if、then、else、fi关键词组成，它进行一次条件匹配判断，如果与条件匹配，则去执行相应的预设命令；反之则去执行不匹配时的预设命令，相当于口语的“如果……那么……或者……那么……”。if条件语句的双分支结构也是一种很简单的判断结构，语法格式如图4-18所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2015/07/%E5%8F%8C%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84-1.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-18 双分支的if条件语句</p><p>下面使用双分支的if条件语句来验证某台主机是否在线，然后根据返回值的结果，要么显示主机在线信息，要么显示主机不在线信息。这里的脚本主要使用ping命令来测试与对方主机的网络联通性，而Linux系统中的ping命令不像Windows一样尝试4次就结束，因此为了避免用户等待时间过长，需要通过-c参数来规定尝试的次数，并使用-i参数定义每个数据包的发送间隔，以及使用-W参数定义等待超时时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim chkhost.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">ping -c 3 -i 0.2 -W 3 $1 &amp;&gt; /dev/null</span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;Host $1 is On-line.&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;Host $1 is Off-line.&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>刚刚在4.2.3小节中用过$?变量，作用是显示上一次命令的执行返回值。若前面的那条语句成功执行，则$?变量会显示数字0，反之则显示一个非零的数字（可能为1，也可能为2，取决于系统版本）。因此可以使用整数比较运算符来判断$?变量是否为0，从而获知那条语句的最终判断情况。这里的服务器IP地址为192.168.10.10，来验证一下脚本的效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# bash chkhost.sh 192.168.10.10</span><br><span class="line">Host 192.168.10.10 is On-line.</span><br><span class="line">[root@linuxprobe ~]# bash chkhost.sh 192.168.10.20</span><br><span class="line">Host 192.168.10.20 is Off-line.</span><br></pre></td></tr></table></figure><p>if条件语句的多分支结构由if、then、else、elif、fi关键词组成，它进行多次条件匹配判断，这多次判断中的任何一项在匹配成功后都会执行相应的预设命令，相当于口语的“如果……那么……如果……那么……”。if条件语句的多分支结构是工作中最常使用的一种条件判断结构，尽管相对复杂但是更加灵活，语法格式如图4-19所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/%E5%A4%9A%E5%88%86%E6%94%AF%E7%9A%84if%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图 4-19 多分支的if条件语句</p><p>下面使用多分支的if条件语句来判断用户输入的分数在哪个成绩区间内，然后输出如Excellent、Pass、Fail等提示信息。在Linux系统中，read是用来读取用户输入信息的命令，能够把接收到的用户输入信息赋值给后面的指定变量，-p参数用于给予用户一些提示信息。</p><p>在下面的脚本示例中，只有当用户输入的分数大于等于85分且小于等于100分，才输出Excellent字样；若分数不满足该条件（即匹配不成功），则继续判断分数是否大于等于70分且小于等于84分，如果是，则输出Pass字样；若两次都落空（即两次的匹配操作都失败了），则输出Fail字样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim chkscore.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">read -p &quot;Enter your score（0-100）：&quot; GRADE</span><br><span class="line">if [ $GRADE -ge 85 ] &amp;&amp; [ $GRADE -le 100 ] ; then</span><br><span class="line">        echo &quot;$GRADE is Excellent&quot;</span><br><span class="line">elif [ $GRADE -ge 70 ] &amp;&amp; [ $GRADE -le 84 ] ; then</span><br><span class="line">        echo &quot;$GRADE is Pass&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;$GRADE is Fail&quot; </span><br><span class="line">fi</span><br><span class="line">[root@linuxprobe ~]# bash chkscore.sh</span><br><span class="line">Enter your score（0-100）：88</span><br><span class="line">88 is Excellent</span><br><span class="line">[root@linuxprobe ~]# bash chkscore.sh </span><br><span class="line">Enter your score（0-100）：80</span><br><span class="line">80 is Pass</span><br></pre></td></tr></table></figure><p>下面执行该脚本。当用户输入的分数分别为30和200时，其结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# bash chkscore.sh  </span><br><span class="line">Enter your score（0-100）：30</span><br><span class="line">30 is Fail</span><br><span class="line">[root@linuxprobe ~]# bash chkscore.sh</span><br><span class="line">Enter your score（0-100）：200 </span><br><span class="line">200 is Fail</span><br></pre></td></tr></table></figure><p>为什么输入的分数为200时，依然显示Fail呢？原因很简单—没有成功匹配脚本中的两个条件判断语句，因此自动执行了最终的兜底策略。可见，这个脚本还不是很完美，建议读者自行完善这个脚本，使得用户在输入大于100或小于0的分数时，给予Error报错字样的提示。</p><h6 id="4-3-2-for条件循环语句"><a href="#4-3-2-for条件循环语句" class="headerlink" title="4.3.2 for条件循环语句"></a><strong>4.3.2 for条件循环语句</strong></h6><p>for循环语句允许脚本一次性读取多个信息，然后逐一对信息进行操作处理，当要处理的数据有范围时，使用for循环语句再适合不过了。for循环语句的语法格式如图4-20所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2015/07/for%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5-1.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-20 for范围循环语句</p><p>下面使用for循环语句从列表文件中读取多个用户名，然后为其逐一创建用户账户并设置密码。首先创建用户名称的列表文件users.txt，每个用户名称单独一行。读者可以自行决定具体的用户名称和个数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim users.txt</span><br><span class="line">andy</span><br><span class="line">barry</span><br><span class="line">carl</span><br><span class="line">duke</span><br><span class="line">eric</span><br><span class="line">george</span><br></pre></td></tr></table></figure><p>接下来编写Shell脚本addusers.sh。在脚本中使用read命令读取用户输入的密码值，然后赋值给PASSWD变量，通过-p参数向用户显示一段提示信息，告诉用户正在输入的内容即将作为账户密码。在执行该脚本后，会自动使用从列表文件users.txt中获取到所有的用户名称，然后逐一使用“id 用户名”命令查看用户的信息，并使用$?判断这条命令是否执行成功，也就是判断该用户是否已经存在。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim addusers.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">read -p &quot;Enter The Users Password : &quot; PASSWD</span><br><span class="line">for UNAME in `cat users.txt`</span><br><span class="line">do</span><br><span class="line">        id $UNAME &amp;&gt; /dev/null</span><br><span class="line">        if [ $? -eq 0 ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;$UNAME , Already exists&quot;</span><br><span class="line">        else</span><br><span class="line">                useradd $UNAME &amp;&gt; /dev/null</span><br><span class="line">                echo &quot;$PASSWD&quot; | passwd --stdin $UNAME &amp;&gt; /dev/null</span><br><span class="line">                echo &quot;$UNAME , Create success&quot;</span><br><span class="line">        fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="Tips-3"><a href="#Tips-3" class="headerlink" title="Tips"></a><strong>Tips</strong></h3><p>&#x2F;dev&#x2F;null是一个被称作Linux黑洞的文件，把输出信息重定向到这个文件等同于删除数据（类似于没有回收功能的垃圾箱），可以让用户的屏幕窗口保持简洁。</p><p>执行批量创建用户的Shell脚本addusers.sh，在输入为账户设定的密码后将由脚本自动检查并创建这些账户。由于已经将多余的信息通过输出重定向符转移到了&#x2F;dev&#x2F;null黑洞文件中，因此在正常情况下屏幕窗口除了“用户账户创建成功”（Create success）的提示后不会有其他内容。</p><p>在Linux系统中，&#x2F;etc&#x2F;passwd是用来保存用户账户信息的文件。如果想确认这个脚本是否成功创建了用户账户，可以打开这个文件，看其中是否有这些新创建的用户信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# bash addusers.sh</span><br><span class="line">Enter The Users Password : linuxprobe</span><br><span class="line">andy , Create success</span><br><span class="line">barry , Create success</span><br><span class="line">carl , Create success</span><br><span class="line">duke , Create success</span><br><span class="line">eric , Create success</span><br><span class="line">george , Create success</span><br><span class="line">[root@linuxprobe ~]# tail -6 /etc/passwd</span><br><span class="line">andy:x:1001:1001::/home/andy:/bin/bash</span><br><span class="line">barry:x:1002:1002::/home/barry:/bin/bash</span><br><span class="line">carl:x:1003:1003::/home/carl:/bin/bash</span><br><span class="line">duke:x:1004:1004::/home/duke:/bin/bash</span><br><span class="line">eric:x:1005:1005::/home/eric:/bin/bash</span><br><span class="line">george:x:1006:1006::/home/george:/bin/bash</span><br></pre></td></tr></table></figure><p>您还记得在学习双分支if条件语句时，用到的那个测试主机是否在线的脚本么？既然我们现在已经掌握了for循环语句，不妨做些更酷的事情，比如尝试让脚本从文本中自动读取主机列表，然后自动逐个测试这些主机是否在线。</p><p>首先创建一个主机列表文件ipaddrs.txt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim ipaddrs.txt</span><br><span class="line">192.168.10.10</span><br><span class="line">192.168.10.11</span><br><span class="line">192.168.10.12</span><br></pre></td></tr></table></figure><p>然后前面的双分支if条件语句与for循环语句相结合，让脚本从主机列表文件ipaddrs.txt中自动读取IP地址（用来表示主机）并将其赋值给HLIST变量，从而通过判断ping命令执行后的返回值来逐个测试主机是否在线。脚本中出现的$（命令）是一种完全类似于第3章的转义字符中反引号<code>命令</code>的Shell操作符，效果同样是执行括号或双引号括起来的字符串中的命令。大家在编写脚本时，多学习几种类似的新方法，可在工作中大显身手：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim CheckHosts.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">HLIST=$(cat ~/ipaddrs.txt)</span><br><span class="line">for IP in $HLIST</span><br><span class="line">do</span><br><span class="line">        ping -c 3 -i 0.2 -W 3 $IP &amp;&gt; /dev/null</span><br><span class="line">        if [ $? -eq 0 ]  </span><br><span class="line">        then</span><br><span class="line">                echo &quot;Host $IP is On-line.&quot;</span><br><span class="line">        else</span><br><span class="line">                echo &quot;Host $IP is Off-line.&quot;</span><br><span class="line">        fi</span><br><span class="line">done</span><br><span class="line">[root@linuxprobe ~]# ./CheckHosts.sh</span><br><span class="line">Host 192.168.10.10 is On-line.</span><br><span class="line">Host 192.168.10.11 is Off-line.</span><br><span class="line">Host 192.168.10.12 is Off-line.</span><br></pre></td></tr></table></figure><p>细心的读者肯定发现了，Shell脚本中的代码缩进格式会根据不同的语句而改变，这个是由Vim编辑器自动完成的，用户无需额外操作。但如果您使用的是7版本以前的系统则没有这个自动缩进功能，但功能是不受影响的，只是影响了阅读体验而已。</p><h6 id="4-3-3-while条件循环语句"><a href="#4-3-3-while条件循环语句" class="headerlink" title="4.3.3 while条件循环语句"></a><strong>4.3.3 while条件循环语句</strong></h6><p>while条件循环语句是一种让脚本根据某些条件来重复执行命令的语句，它的循环结构往往在执行前并不确定最终执行的次数，完全不同于for循环语句中有目标、有范围的使用场景。while循环语句通过判断条件测试的真假来决定是否继续执行命令，若条件为真就继续执行，为假就结束循环。while语句的语法格式如图4-21所示。<img src="https://www.linuxprobe.com/wp-content/uploads/2015/07/while%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5-1.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-21 while条件循环语句</p><p>接下来结合使用多分支的if条件测试语句与while条件循环语句，编写一个用来猜测数值大小的脚本Guess.sh。该脚本使用$RANDOM变量来调取出一个随机的数值（范围为0～32767），将这个随机数对1000进行取余操作，并使用expr命令取得其结果，再用这个数值与用户通过read命令输入的数值进行比较判断。这个判断语句分为三种情况，分别是判断用户输入的数值是等于、大于还是小于使用expr命令取得的数值。当前，现在这些内容不是重点，我们当前要关注的是while条件循环语句中的条件测试始终为true，因此判断语句会无限执行下去，直到用户输入的数值等于expr命令取得的数值后，这两者相等之后才运行exit 0命令，终止脚本的执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim Guess.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">PRICE=$(expr $RANDOM % 1000)</span><br><span class="line">TIMES=0</span><br><span class="line">echo &quot;商品实际价格为0-999之间，猜猜看是多少？&quot;</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">        read -p &quot;请输入您猜测的价格数目：&quot; INT</span><br><span class="line">        let TIMES++</span><br><span class="line">        if [ $INT -eq $PRICE ] ; then</span><br><span class="line">                echo &quot;恭喜您答对了，实际价格是 $PRICE&quot;</span><br><span class="line">                echo &quot;您总共猜测了 $TIMES 次&quot;</span><br><span class="line">                exit</span><br><span class="line">        elif [ $INT -gt $PRICE ] ; then</span><br><span class="line">                echo &quot;太高了！&quot;</span><br><span class="line">        else</span><br><span class="line">                echo &quot;太低了！&quot;</span><br><span class="line">        fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>在这个Guess.sh脚本中，我们添加了一些交互式的信息，从而使得用户与系统的互动性得以增强。而且每当循环到let TIMES++命令时都会让TIMES变量内的数值加1，用来统计循环总计执行了多少次。这可以让用户得知总共猜测了多少次之后，才猜对价格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# bash Guess.sh</span><br><span class="line">商品实际价格为0-999之间，猜猜看是多少？</span><br><span class="line">请输入您猜测的价格数目：500</span><br><span class="line">太低了！</span><br><span class="line">请输入您猜测的价格数目：800</span><br><span class="line">太高了！</span><br><span class="line">请输入您猜测的价格数目：650</span><br><span class="line">太低了！</span><br><span class="line">请输入您猜测的价格数目：720</span><br><span class="line">太高了！</span><br><span class="line">请输入您猜测的价格数目：690</span><br><span class="line">太低了！</span><br><span class="line">请输入您猜测的价格数目：700</span><br><span class="line">太高了！</span><br><span class="line">请输入您猜测的价格数目：695</span><br><span class="line">太高了！</span><br><span class="line">请输入您猜测的价格数目：692</span><br><span class="line">太高了！</span><br><span class="line">请输入您猜测的价格数目：691</span><br><span class="line">恭喜您答对了，实际价格是 691</span><br><span class="line">您总共猜测了 9 次</span><br></pre></td></tr></table></figure><p>当条件为true（真）的时候，while语句会一直循环下去，只有碰到exit才会结束，所以同学们一定要记得加上哦。</p><h6 id="4-3-4-case条件测试语句"><a href="#4-3-4-case条件测试语句" class="headerlink" title="4.3.4 case条件测试语句"></a><strong>4.3.4 case条件测试语句</strong></h6><p>如果您之前学习过C语言，看到这一小节的标题肯定会会心一笑“这不就是switch语句嘛！”是的，case条件测试语句和switch语句的功能非常相似！case语句是在多个范围内匹配数据，若匹配成功则执行相关命令并结束整个条件测试；而如果数据不在所列出的范围内，则会去执行星号（*）中所定义的默认命令。case语句的语法结构如图4-22所示。</p><p><img src="https://www.linuxprobe.com/wp-content/uploads/2020/10/case%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%AD%E5%8F%A5%E7%9A%84%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-22 case条件测试语句</p><p>在前文介绍的Guess.sh脚本中有一个致命的弱点—只能接受数字！您可以尝试输入一个字母，会发现脚本立即就崩溃了。原因是字母无法与数字进行大小比较，例如，“a是否大于等于3”这样的命题是完全错误的。必须有一定的措施来判断用户的输入内容，当用户输入的内容不是数字时，脚本能予以提示，从而免于崩溃。</p><p>通过在脚本中组合使用case条件测试语句和通配符（详见第3章），完全可以满足这里的需求。接下来我们编写脚本Checkkeys.sh，提示用户输入一个字符并将其赋值给变量KEY，然后根据变量KEY的值向用户显示其值是字母、数字还是其他字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# vim Checkkeys.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">read -p &quot;请输入一个字符，并按Enter键确认：&quot; KEY</span><br><span class="line">case &quot;$KEY&quot; in</span><br><span class="line">        [a-z]|[A-Z])</span><br><span class="line">                echo &quot;您输入的是 字母。&quot;</span><br><span class="line">                ;;</span><br><span class="line">        [0-9])</span><br><span class="line">                echo &quot;您输入的是 数字。&quot;</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                echo &quot;您输入的是 空格、功能键或其他控制字符。&quot;</span><br><span class="line">esac</span><br><span class="line">[root@linuxprobe ~]# bash Checkkeys.sh</span><br><span class="line">请输入一个字符，并按Enter键确认：6</span><br><span class="line">您输入的是 数字。</span><br><span class="line">[root@linuxprobe ~]# bash Checkkeys.sh</span><br><span class="line">请输入一个字符，并按Enter键确认：p</span><br><span class="line">您输入的是 字母。</span><br><span class="line">[root@linuxprobe ~]# bash Checkkeys.sh</span><br><span class="line">请输入一个字符，并按Enter键确认：^[[15~</span><br><span class="line">您输入的是 空格、功能键或其他控制字符。</span><br></pre></td></tr></table></figure><h5 id="4-4-计划任务服务程序"><a href="#4-4-计划任务服务程序" class="headerlink" title="4.4 计划任务服务程序"></a><strong>4.4 计划任务服务程序</strong></h5><p>经验丰富的系统运维工程师可以使得Linux在无需人为介入的情况下，在指定的时间段自动启用或停止某些服务或命令，从而实现运维的自动化。尽管我们现在已经有了功能彪悍的脚本程序来执行一些批处理工作，但是，如果仍然需要在每天凌晨两点敲击键盘回车键来执行这个脚本程序，这简直太痛苦了（当然，也可以训练您的小猫在半夜按下回车键）。接下来，刘遄老师将向大家讲解如何设置服务器的计划任务服务，把周期性、规律性的工作交给系统自动完成。</p><p>计划任务分为一次性计划任务与长期性计划任务，大家可以按照如下方式理解。</p><blockquote><p>一次性计划任务：今晚23点30分重启网站服务。</p><p>长期性计划任务：每周一的凌晨3点25分都把&#x2F;home&#x2F;wwwroot目录打包备份为backup.tar.gz。</p></blockquote><p>顾名思义，一次性计划任务只执行一次，一般用于临时的工作需求。用at命令实现这种功能，只需要写成“at 时间”的形式就行。如果想要查看已设置好但还未执行的一次性计划任务，可以使用“at -l”命令；要想将其删除，可以用“atrm 任务序号”，at命令的参数及其作用如表4-6所示。</p><p>表4-6                        at命令的参数及其作用</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-f</td><td>指定包含命令的任务文件</td></tr><tr><td>-q</td><td>指定新任务名称</td></tr><tr><td>-l</td><td>显示待执行任务列表</td></tr><tr><td>-d</td><td>删除指定待执行任务</td></tr><tr><td>-m</td><td>任务执行后给用户发邮件</td></tr></tbody></table><p>在使用at命令来设置一次性计划任务时，默认采用的是交互式方法。例如，使用下述命令将系统设置为在今晚23:30分自动重启网站服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# at 23:30</span><br><span class="line">warning: commands will be executed using /bin/sh</span><br><span class="line">at&gt; systemctl restart httpd</span><br><span class="line">at&gt; 此处请同时按下&lt;Ctrl&gt;+&lt;d&gt;键来结束编写计划任务</span><br><span class="line">job 1 at Wed Oct 14 23:30:00 2020</span><br><span class="line">[root@linuxprobe ~]# at -l</span><br><span class="line">1 Wed Oct 14 23:30:00 2020 a root</span><br></pre></td></tr></table></figure><p>看到warning提醒信息不要慌，at命令只是在告诉我们接下来的任务将由sh解释器负责执行，这与此前学习的bash解释器基本一致，不需要有额外操作。</p><p>另外如果读者想挑战一下难度更大但简捷性更高的方式，可以把前面学习的管道符（任意门）放到两条命令之间，让at命令接收前面echo命令的输出信息，以达到通过非交互式的方式创建计划一次性任务的目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# echo &quot;systemctl restart httpd&quot; | at 23:30</span><br><span class="line">warning: commands will be executed using /bin/sh</span><br><span class="line">job 2 at Wed Oct 14 23:30:00 2020</span><br><span class="line">[root@linuxprobe ~]# at -l</span><br><span class="line">1 Wed Oct 14 23:30:00 2020 a root</span><br><span class="line">2 Wed Oct 14 23:30:00 2020 a root</span><br></pre></td></tr></table></figure><p>上面设置了两条一样的计划任务，使用atrm命令轻松删除其中一个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# atrm 2</span><br><span class="line">[root@linuxprobe ~]# at -l</span><br><span class="line">1 Wed Oct 14 23:30:00 2020 a root</span><br></pre></td></tr></table></figure><p>还有种特殊场景——把计划任务写入到Shell脚本中，当用户激活后再开始倒计时执行，而不是像上面那样“at 23:30”固定的时间，该怎么办呢？</p><p>一般会使用“at now +2 MINUTE”的方式操作，这样代表2分钟（MINUTE）后执行这个任务，也可以替代成小时（HOUR）、日（DAY）、月（MONTH）等词汇：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# at now +2 MINUTE</span><br><span class="line">warning: commands will be executed using /bin/sh</span><br><span class="line">at&gt; systemctl restart httpd</span><br><span class="line">at&gt; 此处请同时按下&lt;Ctrl&gt;+&lt;d&gt;键来结束编写计划任务</span><br><span class="line">job 3 at Wed Oct 14 22:50:00 2020</span><br></pre></td></tr></table></figure><hr><p>还有些时候，我们会希望Linux系统能够周期性地、有规律地执行某些具体的任务，那么Linux系统中默认启用的crond服务简直再适合不过了。创建、编辑计划任务的命令为“crontab -e”，查看当前计划任务的命令为“crontab -l”，删除某条计划任务的命令为“crontab -r”。另外，如果您是以管理员的身份登录的系统，还可以在crontab命令中加上-u参数来编辑他人的计划任务。crontab命令的参数及其作用如表4-7所示。</p><p>表4-7                        crontab命令的参数及其作用</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-e</td><td>编辑计划任务</td></tr><tr><td>-u</td><td>指定用户名称</td></tr><tr><td>-l</td><td>列出任务列表</td></tr><tr><td>-r</td><td>删除计划任务</td></tr></tbody></table><p>在正式部署计划任务前，请先跟刘遄老师念一下口诀“分、时、日、月、星期 命令”。这是使用crond服务设置任务的参数格式（其格式见表4-8）。需要注意的是，如果有些字段没有被设置，则需要使用星号（*****）占位，如图4-23所示。<img src="https://www.linuxprobe.com/wp-content/uploads/2015/02/cron%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%8F%82%E6%95%B0.png" alt="第4章 Vim编辑器与Shell命令脚本第4章 Vim编辑器与Shell命令脚本"></p><p>图4-23 使用crond设置任务的参数格式</p><p>表4-8                    使用crond设置任务的参数字段说明</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>分钟</td><td>取值为0～59的整数</td></tr><tr><td>小时</td><td>取值为0～23的任意整数</td></tr><tr><td>日期</td><td>取值为1～31的任意整数</td></tr><tr><td>月份</td><td>取值为1～12的任意整数</td></tr><tr><td>星期</td><td>取值为0～7的任意整数，其中0与7均为星期日</td></tr><tr><td>命令</td><td>要执行的命令或程序脚本</td></tr></tbody></table><p>假设在每周一、三、五的凌晨3点25分，都需要使用tar命令把某个网站的数据目录进行打包处理，使其作为一个备份文件。我们可以使用crontab -e命令来创建计划任务，为自己创建计划任务无需使用-u参数，具体的实现效果的参数如crontab -l命令结果所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# crontab -e</span><br><span class="line">no crontab for root - using an empty one</span><br><span class="line">crontab: installing new crontab</span><br><span class="line">[root@linuxprobe ~]# crontab -l</span><br><span class="line">25 3 * * 1,3,5 /usr/bin/tar -czvf backup.tar.gz /home/wwwroot</span><br></pre></td></tr></table></figure><p>需要说明的是，除了用逗号（,）来分别表示多个时间段，例如“8,9,12”表示8月、9月和12月。还可以用减号（-）来表示一段连续的时间周期（例如字段“日”的取值为“12-15”，则表示每月的12～15日）。以及用除号（&#x2F;）表示执行任务的间隔时间（例如“*&#x2F;2”表示每隔2分钟执行一次任务）。</p><p>如果在crond服务中需要同时包含多条计划任务的命令语句，应每行仅写一条。例如再添加一条计划任务，它的功能是每周一至周五的凌晨1点钟自动清空&#x2F;tmp目录内的所有文件。尤其需要注意的是，在crond服务的计划任务参数中，所有命令一定要用绝对路径的方式来写，如果不知道绝对路径，请用whereis命令进行查询，rm命令路径为下面输出信息中加粗部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# whereis rm</span><br><span class="line">rm: /usr/bin/rm /usr/share/man/man1/rm.1.gz /usr/share/man/man1p/rm.1p.gz</span><br><span class="line">[root@linuxprobe ~]# crontab -e</span><br><span class="line">crontab: installing new crontab</span><br><span class="line">[root@linuxprobe ~]# crontab -l</span><br><span class="line">25 3 * * 1,3,5 /usr/bin/tar -czvf backup.tar.gz /home/wwwroot</span><br><span class="line">0 1 * * 1-5 /usr/bin/rm -rf /tmp/*</span><br></pre></td></tr></table></figure><p>总结一下使用计划服务的注意事项——在crond服务的配置参数中，一般会像Shell脚本那样以#号开头写上注释信息，这样在日后回顾这段命令代码时可以快速了解其功能、需求以及编写人员等重要信息。另外，计划任务中的“分”字段必须有数值，绝对不能为空或是*号，而“日”和“星期”字段不能同时使用，否则就会发生冲突。</p><p>删除crond计划任务则非常简单，使用crontab -e命令进入到编辑界面中，删除里面的文本信息即可，也可以使用crontab -r命令直接进行删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# crontab -r</span><br><span class="line">[root@linuxprobe ~]# crontab -l</span><br><span class="line">no crontab for root</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
